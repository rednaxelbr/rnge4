openapi: 3.0.0
servers:
  - url: 'https://homolog.rnge.com.br/v2'
    description: Homologação
  - url: 'https://rnge.com.br/v2'
    description: Produção
tags:
  - name: Agrupamentos (skugroups)
    description: Agrupamentos Comerciais
  - name: Anotações de Clientes (customernotes)
    description: Anotações de Clientes
  - name: Carteiras (portfolios)
    description: Carteiras
  - name: Categorias (categories)
    description: Categorias de produtos
  - name: Clientes de Carteira (portfoliocustomers)
    description: Clientes de Carteira
  - name: Clientes em Potencial (leads)
    description: Clientes em Potencial
  - name: Clientes Fidelidade (loyaltycustomers)
    description: Clientes Fidelidade
  - name: Composição Sku (skuparts)
    description: Composição Sku
  - name: Conta despesa (expenseaccounts)
    description: Cadastro das contas de despesa
  - name: Distribuição (distributions)
    description: Distribuição para filiais
  - name: Edição em Lote de Pessoas (bulkpersons)
    description: Edição em Lote de Pessoas
  - name: Empresas (companies)
    description: Cadastro de Empresas
  - name: Endereços de pessoas (addresses)
    description: Endereços de Pessoas
  - name: Entrada de NF (purchases)
    description: Entrada de NF de Compra
  - name: Estoque (skustocks)
    description: Controle de Estoque
  - name: Formas de Quitação (paymentcodes)
    description: Cadastro das formas de quitação
  - name: Fornecedores (suppliers)
    description: Cadastro de Fornecedores
  - name: Fotos de Produtos (productimages)
    description: Fotos de Produtos
  - name: Kardexes (kardexes)
    description: Histórico Estoque (kardex)
  - name: Listas de Preços (pricelists)
    description: Listas de Preços
  - name: Login
    description: Login
  - name: Mapeamentos (purchasemappings)
    description: Mapeamentos Produto x Fornecedor
  - name: Marcas (brands)
    description: Cadastro das marcas dos produtos
  - name: Meios de Entrega (deliverytypes)
    description: Cadastro dos meios de entrega
  - name: Minha Conta (billings)
    description: Minha Conta
  - name: Notas/Cupons Fiscais (invoices)
    description: Notas e Cupons Fiscais (NFe/NFCe)
  - name: Ordens de Compra (purchaseorders)
    description: Gestão de Ordens de Compra
  - name: PDV
    description: Equipamento PDV
  - name: Pedidos (orders)
    description: Gestão de Pedidos
  - name: Pedidos de Entrega (deliveries)
    description: Pedidos de Entrega
  - name: Pedidos por SKU (orderchecks)
    description: Separação/Conferência de Pedidos
  - name: Pedidos Venda (sales)
    description: Pedidos Venda
  - name: Pessoas (customercategories)
    description: Categorias de Pessoas
  - name: Pessoas (persons)
    description: Cadastro de Pessoas
  - name: Pontos do Cliente (customerpoints)
    description: Pontos do Cliente
  - name: Posição Estoque (stockdailysummaries)
    description: Posição de estoque
  - name: Prédios de Estoque
    description: Cadastro dos prédios de estoque
  - name: Produtos (products)
    description: Cadastro de Produtos
  - name: Produtos (skuarticles)
    description: Cadastro de Mercadorias
  - name: Produtos (skuconfigs)
    description: Cadastro de configuração de SKU x Empresa
  - name: Produtos (skus)
    description: Cadastro de SKUs
  - name: Prospectos (prospects)
    description: Cadastro de Prospecção
  - name: Rateio de Compras (purchaseshareitems)
    description: Rateio de Compras (Verba)
  - name: Recepção de Nota (receptions)
    description: Recepção de Nota (RN)
  - name: Recursos Humanos (humanresources)
    description: Recursos Humanos (RH)
  - name: SCM Log Projeções (scmprojectionlogs)
    description: SCM Log das Projeções
  - name: Serviços (services)
    description: Cadastro de Serviços para NFSe
  - name: Sku Reserva Prédio (skureservations)
    description: Lista dos Sku's Reserva Prédio
  - name: Sku Trânsito (skutransits)
    description: Lista dos Sku's em trânsito
  - name: Status (status)
    description: Versão API
  - name: Timelines (timelines)
    description: Histórico dos registros
  - name: Transferências (transfers)
    description: Transferências
  - name: Transportadoras (carriers)
    description: Cadastro de Transportadoras/Entregadores
  - name: Tributária (Classe Fiscal)
    description: Cadastro das classes fiscais
  - name: Unidades de Medida (units)
    description: Unidades de Medida
  - name: Vales (vouchers)
    description: Vales  
  - name: Vendedores (salespersons)
    description: Vendedores
info:
  license:
    name: Copyright (C) Rednaxel Informática
    url: 'https://rednaxel.com'
  description: |
    Utilizamos o **Authorization** de duas formas:
    - No `POST /login`, **Basic** com username = `usuario@tenant` e password = `senha`
    - Nos demais recursos utilizar **Bearer** `token` (obtido no login)

    ## Definições

    **Tenant\:** Conta do cliente na Rednaxel. O tenant pode ter uma ou empresas que podem ser filiais (mesma raiz de CNPJ) ou não.

    **Usuário\:** Cada usuário pertence a um tenant e tem um `user_id` global e um `nome_usuario` único dentro do tenant.

    ## Padrões

    Todos os GET usam os parâmetros "filter", "sort" e "range" da seguinte forma:

     | Parâmetro  | Formato | URL Query                              | SQL equivalente       |
     |------------|---------|----------------------------------------|-----------------------|
     | filter     |  JSON   | GET v2/resources?filter={"store":34}   | ... WHERE store = 34  |
     | sort       |  CSV    | GET v2/resources?sort=\["name","ASC"\] | ... ORDER BY name asc |
     | range      |  CSV    | GET v2/resources?range=\[0,9\]         | ... OFFSET 0 LIMIT 10 |


    Esta API utiliza o padrão REST e autenticação HTTP Bearer (RFC 6750) em todos os recursos, exceto no login, que usa AuthBasic (RFC 7617). O formato padrão de requisição e resposta é o JSON na maioria dos recursos; as exceções são os que trabalham com Notas Fiscais (XML) ou documentos para impressão (PDF). Cuidado com a paginação: quando o `range` não for informado a API utilizará o padrão [0,99].
  version: 2.0.0
  title: API do RNGE 4
  termsOfService: 'https://rednaxel.com/termos-de-uso'
  contact:
    name: Suporte
    email: suporte@rednaxel.com
    url: 'https://suporte.rednaxel.com'
  x-logo:
    url: 'https://storage.googleapis.com/rednaxel-dados/rednaxel-264.png'
    altText: Logo da Rednaxel
paths:
  '/addresses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id do endereço
    get:
      summary: Consultando um endereço
      tags:
        - Endereços de pessoas (addresses)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Endereco-Pessoa.yaml
      operationId: get-addresses-id
      description: Consulta um endereço de uma pessoa
    put:
      summary: Atualizando um endereço
      operationId: put-addresses-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Endereco-Pessoa.yaml
      description: Atualiza um endereço
      tags:
        - Endereços de pessoas (addresses)
    delete:
      summary: Excluindo um endereço
      operationId: delete-addresses-id
      responses:
        '200':
          description: OK
      description: Exclui um endereço
      tags:
        - Endereços de pessoas (addresses)
  /addresses:
    get:
      summary: Listando endereços de uma pessoa.
      tags:
        - Endereços de pessoas (addresses)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Endereco-Pessoa.yaml
      operationId: get-addresses
      description: |
        Listagem de endereços

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id_pessoa | int64 | código da pessoa | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Criando um endereço
      operationId: post-addresses
      responses:
        '200':
          description: OK
      tags:
        - Endereços de pessoas (addresses)
      description: Cria um endereço de uma pessoa
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Endereco-Pessoa.yaml
        description: ''
  /buildings:
    get:
      summary: Listando prédios de estoque
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Predio-Estoque.yaml
      operationId: get-buildings
      description: |
        Lista de prédios de estoque 

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | código do Prédio| 
        | todos | boolean | Padrão False, trazendo somente os prédios com endereço | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Prédios de Estoque
    post:
      summary: Criando um endereço
      operationId: post-buildings
      responses:
        '200':
          description: OK
      description: Cria um novo prédio de estoque
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Predio-Estoque.yaml
      tags:
        - Prédios de Estoque
    parameters: []
  /billings:
    parameters: []
    get:
      description: Minha Conta
      operationId: get-billings
      tags:
        - Minha Conta (billings)
      responses:
        '200':
          description: OK
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: ../models/Billings.yaml
      summary: Listando minha conta
    put:
      summary: Atualizando minha conta
      operationId: put-billings
      tags:
        - Minha Conta (billings)
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Billings.yaml
      description: Atualiza minha conta
  '/buildings/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id do prédio
    get:
      summary: Consultando um prédio de estoque
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Predio-Estoque.yaml
      operationId: get-buildings-id
      description: Consulta um prédio de estoque
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Prédios de Estoque
    put:
      summary: Atualizando um prédio de estoque
      operationId: put-buildings-id
      responses:
        '200':
          description: OK
      description: |
        Atualiza um prédio de estoque

        <b>Resetar Estoque Prédio: </b>

        Existe a possibilidade de Zerar o estoque de TODOS os produtos com a permissão 4620. Campos a serem passado no PUT ("resetar_estoque" (bool) e "confirmar_reset" (string)). Ex.: Zerando o estoque do prédio 99:

        curl -g -X PUT 'https://homolog.rnge.com.br/v2/buildings/99' -u userid:token -d '{"id":99,"resetar_estoque":true,"desc_predio":"xxxx","confirmar_reset":"xxxx"}'

        Obs.:
        "confirmar_reset" é o nome exato do prédio a qual deseja zerar o estoque.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Predio-Estoque.yaml
        description: ''
      tags:
        - Prédios de Estoque
  /bulkpersons:
    post:
      summary: Edição em lote
      operationId: post-bulkpersons
      responses:
        '200':
          description: OK
      description: Edição em lote de pessoas
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/BulkPersons.yaml
        description: ''
      x-stoplight:
        id: 7rqsqkws4wp49
      tags:
        - Edição em Lote de Pessoas (bulkpersons)
    parameters: []
  /brands:
    get:
      summary: Listando as marcas
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: ../models/Brands.yaml
      operationId: get-brands
      description: |-
        Lista de marcas de produto 

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | id da Marca| 
        | ids | []int64 | Possibilidade de filtrar mais de uma marca |
        | nome_marca | string | Nome da marca |
        | inativas | bool | Trazer somente as marcas inativas |
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      requestBody:
        content: {}
      tags:
        - Marcas (brands)
    post:
      summary: Criando uma marca
      operationId: post-brands
      responses:
        '200':
          description: OK
      description: Cria uma nova marca
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Brands.yaml
      tags:
        - Marcas (brands)
    parameters: []
  '/brands/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id da marca
    get:
      summary: Consultando uma marca de produto
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Brands.yaml
      operationId: get-brands-id
      description: Consulta uma marca de produto
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Marcas (brands)
    put:
      summary: Atualizando um prédio de estoque
      operationId: put-brands-id
      responses:
        '200':
          description: OK
      description: Atualiza uma marca de produto
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Brands.yaml
        description: ''
      tags:
        - Marcas (brands)
    delete:
      summary: Excluindo uma marca de produto
      operationId: delete-brands-id
      responses:
        '200':
          description: OK
      description: Exclui uma marca de produto.
      tags:
        - Marcas (brands)
  /carriers:
    get:
      summary: Consulta lista de transportadoras
      tags:
        - Transportadoras (carriers)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Carrier.yaml
      operationId: get-carriers
      description: Lista de transportadoras
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Cria uma transportadora
      tags:
        - Transportadoras (carriers)
      responses:
        '200':
          description: OK
      operationId: post-carriers
      description: Cria uma transportadora
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Carrier.yaml
  '/carriers/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID da transportadora
    get:
      summary: Consulta uma transportadora
      tags:
        - Transportadoras (carriers)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Carrier.yaml
      operationId: get-carriers-id
      description: Consulta uma transportadora
    put:
      summary: Atualiza uma transportadora
      tags:
        - Transportadoras (carriers)
      responses:
        '200':
          description: OK
      operationId: put-carriers-id
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Carrier.yaml
        description: ''
      description: Atualiza uma transportadora
    delete:
      summary: Inativar uma transportadora
      tags:
        - Transportadoras (carriers)
      responses:
        '200':
          description: OK
      operationId: delete-carriers-id
      description: Deleta (inativa) uma transportadora
  /cashiers:
    get:
      tags:
        - PDV
      summary: Listando PDVs
      description: Lista de Equipamentos PDV de todas as lojas (companies) do tenant
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
        - schema:
            type: string
            default: Basic MTIzNDp1dWlkLXRva2Vu
          in: header
          name: Authorization
          required: true
          description: 'ID:TOKEN'
      operationId: get-cashiers
      responses:
        '200':
          description: OK
    post:
      tags:
        - PDV
      summary: Criando PDV
      description: Cria novo PDV
      operationId: post-cashiers
      responses:
        '200':
          description: OK
    parameters: []
  '/cashiers/{id}':
    get:
      tags:
        - PDV
      summary: Consultando um PDV
      description: Consulta PDV
      parameters:
        - schema:
            type: string
            default: Basic MTIzNDp1dWlkLXRva2Vu
          in: header
          description: 'ID:TOKEN'
          required: true
          name: Authorization
      operationId: get-cashiers-id
      responses:
        '200':
          description: OK
    put:
      tags:
        - PDV
      summary: Atualizando um PDV
      description: Atualiza um PDV
      responses:
        '200':
          description: Success!
        '400':
          description: Error
      operationId: put-cashiers-id
    delete:
      tags:
        - PDV
      summary: Deletando um PDV
      description: Deleta um PDV
      responses:
        '200':
          description: Info about deleted POS
        '400':
          description: Error
      operationId: delete-cashiers-id
    parameters:
      - schema:
          type: integer
          minimum: 1
          default: 1
        name: id
        in: path
        required: true
        description: ID do PDV
  /catalogs:
    get:
      summary: Listagem de catálogos
      tags:
        - Categorias (categories)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Catalogo.yaml
      operationId: get-catalogs
      description: Lista de catálogos
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
  /categories:
    get:
      summary: Listagem de Categorias
      tags:
        - Categorias (categories)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Categoria.yaml
      operationId: get-categories
      description: |-
        Listagem de categorias de produtos. Se o catálogo não for informado é listado o catálogo padrão (Taxonomia). Principais filtros:
        - `id_catalogo` (number) categorias de um catálogo
        - `nivel_categ` (number) categorias de um nível
        - `parent_id` (number) subcategorias de uma categoria
        - `arvore` (bool) catálogo em formato de árvore 
        - `dump` (bool) dump do catálogo completo (use com e inativas) 
        - `inativas` (bool) inclui categorias inativas
        - `vinculavel` (bool) categorias vinculáveis
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Cria uma nova categoria
      operationId: post-categories
      responses:
        '200':
          description: OK
      description: Cria uma nova categoria de produto
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Categoria.yaml
      tags:
        - Categorias (categories)
  '/companies/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id da empresa
    get:
      summary: Consulta uma empresa
      tags:
        - Empresas (companies)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Empresa.yaml
      operationId: get-companies-id
      description: Consulta uma empresa
    put:
      summary: Atualiza uma empresa
      operationId: put-companies-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Empresa.yaml
        description: ''
      description: Atualiza uma empresa
      tags:
        - Empresas (companies)
  /customercategories:
    get:
      summary: Listando Pessoa Categoria (customercategories)
      operationId: get-customercategories
      description: |
        Lista da Pessoa Categoria

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | ID | int64 | código da categoria pessoa| 
        | IDs | []int64 | vetor do código da categoria pessoa| 
        | desc_categoria | string | Descrição da categoria pessoa | 
      parameters:
        - in: query
          name: filter
          description: Filtro
          schema:
            default: '{"id":5}'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Pessoa-Categoria.yaml
      tags:
        - Pessoas (customercategories)
    post:
      summary: Criando uma Pessoa Categoria (customercategories)
      operationId: post-customercategories
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Pessoa-Categoria.yaml
      description: Cria uma pessoa categoria
      tags:
        - Pessoas (customercategories)
    parameters: []
  '/customercategories/{id}':
    get:
      summary: Consultando uma Pessoa Categoria (customercategories)
      operationId: get-customercategories-id
      parameters: []
      description: Mostra uma pessoa categoria já existente
      tags:
        - Pessoas (customercategories)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Pessoa-Categoria.yaml
    put:
      summary: Atualizando uma Pessoa Categoria  (customercategories)
      operationId: put-customercategories-id
      responses:
        '200':
          description: OK
      description: Atualiza uma pessoa categoria já existente
      tags:
        - Pessoas (customercategories)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Pessoa-Categoria.yaml
    delete:
      summary: Excluindo uma Pessoa Categoria (customercategories)
      operationId: delete-customercategories-id
      responses:
        '200':
          description: OK
      description: Exclui uma pessoa categoria já existente.
      tags:
        - Pessoas (customercategories)
    parameters:
      - schema:
          type: integer
          default: 100
        name: id
        in: path
        description: ID que representa a configuração do sku x empresa
        required: true
  /customernotes:
    get:
      summary: Listagem das Anotações Cliente
      description: |
        Anotações dos Clientes

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id_lead | int64 | ID do Lead | 
        | id_pessoa | int64 | ID da pessoa | 
        | texto_livre | string | Pesquisa no campo texto_atividade | 
        | dias_alteracao | int | se = 1 pega do dia atual, se = 2 pega do dia anterior e o atual |  
      tags:
        - Anotações de Clientes (customernotes)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/CustomerNotes.yaml
      operationId: get-customernotes
      x-stoplight:
        id: ldx87pbj4and6
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Criando Anotação Cliente
      description: Criar uma nova anotação no cliente
      tags:
        - Anotações de Clientes (customernotes)
      responses:
        '200':
          description: OK
      operationId: post-customernotes
      x-stoplight:
        id: boaql2cfed8ub
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/CustomerNotes.yaml
  /customerpoints:
    get:
      summary: Listagem Ponto Cliente
      description: |
        Lista Pontos do Cliente

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | ID da Fidelidade | 
        | ids | []int64 | IDs da Fidelidade | 
        | id_pessoa | int64 | ID da pessoa. Filtro obrigatório ou dias_alteracao | 
        | dias_alteracao | int | usado em integração, se = 1 pega do dia atual, se = 2 pega do dia anterior e o atual |  
      tags:
        - Pontos do Cliente (customerpoints)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/CustomerPoints.yaml
      operationId: get-customerpoints
      x-stoplight:
        id: ldx87pbj4and6
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Fidelidade Evento
      description: Criar um novo ponto de fidelidade
      tags:
        - Pontos do Cliente (customerpoints)
      responses:
        '200':
          description: OK
      operationId: post-customerpoints
      x-stoplight:
        id: boaql2cfed8ub
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/CustomerPoints.yaml
  /deals:
    post:
      summary: Criando CRM Oportunidade
      operationId: post-deals
      responses:
        '200':
          description: OK
      tags:
        - Notas/Cupons Fiscais (invoices)
      parameters: []
      description: Criando uma CRM Oportunidade
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Deals.yaml
      x-stoplight:
        id: c7uqnajaz6b38
    get:
      summary: CRM Oportunidades
      operationId: get-deals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Deals.yaml
      description: |
        Lista de crm oportunidades. 

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | ID do deals| 
        | id_etapa | int64 | Ex: 1- PROSPECÇÃO, 2-DESCOBERTA, 3-PROPOSTA, etc  | 
        | id_pessoa | int64 | ID da Pessoa | 
        | id_vendedor | int64 | ID do Vendedor | 
        | pesquisa | string |Filtro tanto pelo nome, id, cpf ou cnpj da pessoa | 
        | numero_pedido | int64 | Número Pedido |
        | contato_ativo | bool | Contato Ativo (Somente CC - Contato Comercial, um por cliente) |
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Notas/Cupons Fiscais (invoices)
      x-stoplight:
        id: n7feq4ttgoqg8
    parameters: []
  '/deals/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id da conta de despesa
    get:
      summary: Consultando uma Oportunidade CRM
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Deals.yaml
      operationId: get-deals-id
      description: Consulta uma Oportunidade CRM
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Conta despesa (expenseaccounts)
      x-stoplight:
        id: t1m3n69a46rx8
    put:
      summary: Atualizando uma Oportunidade CRM
      operationId: put-deals-id
      responses:
        '200':
          description: OK
      description: Atualiza uma Oportunidade CRM
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Deals.yaml
        description: ''
      tags:
        - Conta despesa (expenseaccounts)
      x-stoplight:
        id: h5wgm2izn11f3
    delete:
      summary: Excluindo uma Oportunidade CRM
      operationId: delete-deals-id
      responses:
        '200':
          description: ID
          content: {}
      description: Exclui uma Oportunidade CRM
      tags:
        - Conta despesa (expenseaccounts)
      x-stoplight:
        id: pusk1xugwmgoc
  /deliverytypes:
    get:
      summary: Lista de Meios de Entrega
      tags:
        - Meios de Entrega (deliverytypes)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/DeliveryType.yaml
      operationId: get-deliverytypes
      description: Lista de Meios de Entrega
    post:
      summary: Cadastra um Meio de Entrega
      tags:
        - Meios de Entrega (deliverytypes)
      responses:
        '200':
          description: OK
      operationId: post-deliverytypes
      description: Cadastra um Meio de Entrega
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/DeliveryType.yaml
  /deliveries:
    get:
      summary: Lista de Entregas de Pedido
      tags:
        - Pedidos de Entrega (deliveries)
      description: |
        Lista de pedidos de entrega

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | id da delivery| 
        | ids | []int64 | ids das deliveries | 
        | numero_pedido | int64 | Número do Pedido | 
        | pesquisa | string | Pesquisa pelo nome, id_pessoa, ou cpf/cnpj da pessoa | 
        | id_pessoa| int64 | Pesquisa somente pelo ID da Pessoa | 
        | dataini | string | Data Inicial | 
        | datafim | string | Data Final | 
        | ids_empresas | []int64 | Ids das empresas | 
        | id_empresa | int64 | ID da empresa | 
        | qualquer_operacao | bool | Qualquer Operação | 
        | qualquer_status | bool | Qualquer Status | 
        | exibir_recebidos | bool | Exibir também os recebidos | 
      operationId: get-deliveries
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
        description: ''
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Deliveries.yaml
    post:
      summary: Criando um pedido entrega
      operationId: post-deliveries
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Deliveries.yaml
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
      parameters: []
      tags:
        - Pedidos de Entrega (deliveries)
      description: Cria um novo pedido de entrega
      responses:
        '200':
          description: OK
    parameters: []
  /distributions:
    get:
      summary: Listando distribuições
      tags:
        - Distribuição (distributions)
      operationId: get-distributions
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
      description: Lista de distribuições para filiais
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Distribution.yaml
    post:
      summary: Criando uma nova distribuição
      operationId: post-distributions
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                ids_empresas:
                  type: array
                  description: Lista de empresas destino
                  items: {}
                ids_categorias:
                  type: string
                id_fornec:
                  type: integer
                numero_pedido:
                  type: integer
                  description: Nº do pedido que contém os itens que serão enviados
                tipo_distrib:
                  type: string
                  enum:
                    - NORMAL
                    - ABLOJA
                    - REVFND
                    - REVSNO
                  description: 'Tipo de distribuição (padrão: NORMAL)'
                curva_minima_geral:
                  type: integer
                  description: Somente produtos desta curva para cima serão enviados
                calendario:
                  type: boolean
                gerar_pedidos:
                  type: boolean
                  description: 'Se TRUE, gera os pedidos após criar a distribuição'
                codigo_sku:
                  type: integer
                  description: Código de um SKU para testes
                predio:
                  type: integer
                  description: 'Prédio de origem (padrão: CD)'
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
      parameters: []
      tags:
        - Distribuição (distributions)
      description: Cria uma nova distribuição
      responses:
        '200':
          description: OK
    parameters: []
  /distribskus:
    get:
      summary: Listando SKUs de uma distribuição
      tags:
        - Distribuição (distributions)
      operationId: get-distribskus
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
      description: Listando SKUs de uma distribuição
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/DistribSku.yaml
      x-stoplight:
        id: aut02r4v3vh8a
    parameters: []
  /expenseaccounts:
    get:
      summary: Listando as contas de despesa
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Conta-Despesa.yaml
      operationId: get-expenseaccounts
      description: |
        Lista de contas de despesa

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | id da conta despesa| 
        | codigo_conta | int64 | código da conta despesa| 
        | desc_conta | string | Descrição da conta despesa. Pesquisa maiúscula e minúscula e em qualquer parte da descrição| 
        | conta_contabil | string | código string exato da conta contábil| 
        | todos | boolean | Padrão False, trazendo somente as contas de despesa ativas | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Conta despesa (expenseaccounts)
    post:
      summary: Criando uma conta de despesa
      operationId: post-expenseaccounts
      responses:
        '200':
          description: OK
      description: Cria uma nova conta de despesa
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Conta-Despesa.yaml
      tags:
        - Conta despesa (expenseaccounts)
    parameters: []
  '/expenseaccounts/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id da conta de despesa
    get:
      summary: Consultando uma conta despesa
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Conta-Despesa.yaml
      operationId: get-expenseaccounts-id
      description: Consulta uma conta despesa
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Conta despesa (expenseaccounts)
    put:
      summary: Atualizando uma conta despesa
      operationId: put-expenseaccounts-id
      responses:
        '200':
          description: OK
      description: Atualiza uma conta despesa
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Conta-Despesa.yaml
        description: ''
      tags:
        - Conta despesa (expenseaccounts)
    delete:
      summary: Excluindo uma conta despesa
      operationId: delete-expenseaccounts-id
      responses:
        '200':
          description: OK
      description: Exclui uma conta despesa.
      tags:
        - Conta despesa (expenseaccounts)
  /humanresources:
    get:
      summary: Recursos Humanos
      operationId: get-humanresources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/HumanResource.yaml
      description: |-
        Listar as pessoas com o perfil de colaborador e ativas
        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id  | integer | é o id da pessoa | 
        | pesquisa | string | Filtra tanto pelo id como pelo nome razão da pessoa  | 
        | pesq_user | string | Filtra tanto pelo id como pelo nome do usuário |
        | todos | bool | Por padrão traz somente as pessoas com usuários |
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Recursos Humanos (humanresources)
      x-stoplight:
        id: pnt2xurl5ytaw
    parameters: []
    delete:
      summary: Inativa usuário
      operationId: delete-humanresources
      responses:
        '200':
          description: OK
      x-stoplight:
        id: 3bkv7jys6mcgd
      description: Inativa usuário e remove perfil colaborador da pessoa
      tags:
        - Recursos Humanos (humanresources)
  /invoicetypes:
    get:
      summary: Tipos de Documentos Fiscais
      operationId: get-invoicetypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Invoice.yaml
      description: |
        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id  | string | é o tipo_doc | 
        | ids | []string | Pode filtrar mais de um tipo separados por vírgula  | 
        | ordem_tipo | int64 | Ordenação para listagem |
        | tipo_oper | string | Tipo de Operação |
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Notas/Cupons Fiscais (invoices)
      x-stoplight:
        id: fq6d8c37qbtc9
    parameters: []
  /invoices:
    post:
      summary: Criando Nota/Cupom Fiscal
      operationId: post-invoices
      responses:
        '200':
          description: OK
      tags:
        - Notas/Cupons Fiscais (invoices)
      parameters: []
      description: 'Envia o XML de uma NFe/NFCe '
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                xml:
                  type: string
                  description: XML codificado em Base64
                  writeOnly: true
              required:
                - xml
    get:
      summary: Lista de NF/Cupons
      operationId: get-invoices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Invoice.yaml
      description: |-
        Lista de notas/cupons. O filtro "modelo" é obrigatório, caso não filtrar por "chnfe".
        Para listar os itens utilize o recurso GET v2/invoiceitems.

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | dataini | string | Formato: YYYY/MM/DD, se não informar busca a data atual. Data emissão | 
        | datafim | string | Formato: YYYY/MM/DD  | 
        | modelo | int | Ex.: 55 (NFe) ou 65 (NFCe), obrigatório se não filtrar por chnfe | 
        | id_empresa | int64 | se não informar o id_empresa usa a empresa logada | 
        | chnfe | string | Chave de acesso com os 44 caracteres | 
        | id_pessoa | int64 | ID da Pessoa |
        | idpessoa_razao_cpf_cnpj | string | Filtro tanto pelo nome, id, cpf ou cnpj da pessoa |
        | cnpj_emit | int64 | CNPJ do Emitente |
        | cpf_cnpj | int64 | CPF ou CNPJ |
        | numero_pedido | int64 | Número do pedido |
        | pdv | int64 | Número de série (pdv) |
        | id_romaneio | int64 | Número do Romaneio |
        | numero | int | Número da NF |
        | notas | string | NFs separados por vírgula |
        | ocultar_5929 | bool | Oculta notas CFOP 5929, modelo = 65 (NFCe) |
        | total_vnf | float64 | Valor exato do total da NF |
        | cupons_cancelados | bool | Filtra as notas canceladas |
        | vetor_pagtos | []int64 | Array dos tipos de pagamentos (TPAG) |
        | vetor_status | []int64 | Array dos status (Ex: [500, 590]) |
        | codigo_descricao | string | Tanto pelo código como pela descrição do produto  |
        | nome_usuario | string | Usuário do documento  |
        | tipo | string | Tipo Doc (Ex: V (Venda), D (Devolução Cliente), F (Devolução para Fornecedor), X (Cancelada), T (Transferência)) |
        | dias_alteracao | integer | Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. Lembrar que o filtro modelo é obrigatório  |
        | ids_tags | []int64 | Tags dos Pedidos |

        *dataini - período acima de 60 dias pede a transação 3520- Cupons Notas 60 dias
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Notas/Cupons Fiscais (invoices)
  '/invoices/{chnfe}':
    parameters:
      - schema:
          type: string
        name: chnfe
        in: path
        required: true
        description: Chave de acesso (44 dígitos)
    get:
      summary: Consulta uma Nota/Cupom
      tags:
        - Notas/Cupons Fiscais (invoices)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Invoice.yaml
      operationId: get-invoices-id
      description: |-
        Consulta uma NF/Cupom, colocando o conteúdo do arquivo XML no campo `arquivo_xml` do JSON. Para extrair somente o XML via curl, sugerimos usar o aplicativo "jq" na linha de comando:

        ```bash
        curl ... | jq --raw-output .arquivo_xml
        ```

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | dataini | string | Formato: YYYY/MM/DD, se não informar busca a data atual. Data emissão | 
        | datafim | string | Formato: YYYY/MM/DD  | 
        | modelo | int | Ex.: 55 (NFe) ou 65 (NFCe), obrigatório se não filtrar por chnfe | 
        | id_empresa | int64 | se não informar o id_empresa usa a empresa logada | 
        | chnfe | string | Chave de acesso com os 44 caracteres | 
        | id_pessoa | int64 | ID da Pessoa |
        | idpessoa_razao_cpf_cnpj | string | Filtro tanto pelo nome, id, cpf ou cnpj da pessoa |
        | cnpj_emit | int64 | CNPJ do Emitente |
        | cpf_cnpj | int64 | CPF ou CNPJ |
        | numero_pedido | int64 | Número do pedido |
        | pdv | int64 | Número de série (pdv) |
        | id_romaneio | int64 | Número do Romaneio |
        | numero | int | Número da NF |
        | notas | string | NFs separados por vírgula |
        | ocultar_5929 | bool | Oculta notas CFOP 5929, modelo = 65 (NFCe) |
        | total_vnf | float64 | Valor exato do total da NF |
        | cupons_cancelados | bool | Filtra as notas canceladas |
        | vetor_pagtos | []int64 | Array dos tipos de pagamentos (TPAG) |
        | vetor_status | []int64 | Array dos status (Ex: [500, 590]) |
        | codigo_descricao | string | Tanto pelo código como pela descrição do produto  |
        | nome_usuario | string | Usuário do documento  |
        | tipo | string | Tipo Doc (Ex: V (Venda), D (Devolução Cliente), F (Devolução para Fornecedor), X (Cancelada), T (Transferência)) |
        | dias_alteracao | integer | Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. Lembrar que o filtro modelo é obrigatório  |

        *dataini - período acima de 60 dias pede a transação 3520- Cupons Notas 60 dias
      parameters:
        - in: query
          name: filter
          description: Filtros
          required: true
          schema:
            default: '{"chnfe":"99999999999999999999999999999999999999999999", "modelo":55}'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      x-stoplight:
        id: n5pjq9nvfqm51
  /invoiceitems:
    parameters: []
    get:
      summary: Consulta itens de uma Nota/Cupom
      tags:
        - Notas/Cupons Fiscais (invoices)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/InvoiceItems.yaml
      operationId: get-invoiceitems-id
      description: |
        Consulta os itens de uma NF/Cupom, colocando o filtro por fiscdoc_id do #/invoices. Para visualizar, via curl, sugerimos usar o aplicativo "jq" na linha de comando:

        ```bash
        curl ... | jq .
        ```

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | fiscdoc_id | integer | Filtro principal para visualizar os itens de uma nota | 
        | cnpj_emit | integer | CNPJ do Emitente  | 
      parameters:
        - in: query
          name: filter
          schema:
            example: '{"fiscdoc_id":123456}'
            type: string
            format: iri-reference
          description: Filtro
          required: true
        - $ref: '#/components/parameters/Range'
      x-stoplight:
        id: aubp53omnb6cw
  /login:
    parameters: []
    post:
      summary: Efetuando login
      operationId: post-login
      responses:
        '200':
          description: Os campos `user_id` e `token` devem ser usados nas chamadas seguintes.
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: number
                    description: ID do login
                  user_id:
                    type: number
                    description: ID do Usuário
                  token:
                    type: string
                    description: Token de acesso
                  logo_color:
                    type: string
                    description: Cor de fundo (frontend)
                  font_color:
                    type: string
                    description: Cor da letra (frontend)
                  homologacao:
                    type: boolean
                    description: Servidor de homologação ou produção?
                required:
                  - user_id
                  - token
      parameters: []
      description: |
        Efetua o login com `usuario@tenant` e `senha` para obter UserID e Token. Se o `id_empresa` não for informado o login será feito na *empresa padrão* do usuário. 
      security:
        - Usuário/Senha: []
      tags:
        - Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                end_ip:
                  type: string
                  description: IP interno para suporte
                id_empresa:
                  description: ID da empresa onde será feito o login
                  type: integer
  /orders:
    get:
      tags:
        - Pedidos (orders)
      summary: Listando pedidos
      description: "Lista de pedidos. Filtros:\n- `ids_empresas`: integer[]\n- `id_destino`: integer\n- `meus_pedidos`: boolean\n- `cpf_cnpj`: integer\n- `numero_pedido` integer\n- `aplicativo` string\n- `num_nf`: string\n- `cancelados`: boolean\n- `finalizados`: boolean\n- `meus_pedidos`: boolean\n- `entregas_meu_predio`: boolean\n- `pendentes_entrega`: boolean\n- `requer_liberacao`: boolean\n- `reab_gondola`: boolean\n- `entregues`: boolean\n- `pedidos_para_mim`: boolean\n- `valor`: float - Valor da NF\n- `serie`: integer\n- `cnpj_emit`: integer\n- `id_pessoa`: integer\n- `id_distrib`: integer\n- `id_refil`: integer\n- `id_romaneio`: integer\n- `id_categoria`: integer\n- `id_vendedor`: integer\n- `nome_vendedor`: string\n- `id_canal`: integer\n- `desc_canal`: string\n- `status_min`: integer\n- `status_max`: integer\n- `id_externo`: integer\n- `vetor_id_externo`: []string\n- `lista_cfop`: []integer\n- `num_recibo`: string\n- `nome_razao`: string\n- `desc_tipo_ent`: string\n- `chnfe_gerada`: string\n- `etapas`: integer\n- `vetor_status`: []integer\n- `dataini`: string\n- `datafim`: string\n- `transportadora`: string\n- `mktplace_codigo`: string\n- `vetor_operacao`: string - Pode-se utilizar o filtro \"dias\"\n- `filtrar_por`: string - Colunas válidas: [\"dthr_criacao\", \"inicio_proc\", \"dthr_separacao\",\n\t\t\t\"dthr_conferencia\", \"data_emissao\", \"dthr_expedicao\", \"data_entrega\",\n\t\t\t\"limite_exp\", \"dthr_criacao_externo\", \"dthr_entregue\", \"dthr_inconsistencia\"]\n- `dias`: integer - é referente ao dias_alteracao já usado em outras API\n- `ids_tags`: integer[] . (Pode-se utilizar o filtro \"dias\" (referente nº de dias de alteração))\n- `todos`: boolean\n"
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      operationId: get-orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Order.yaml
    post:
      tags:
        - Pedidos (orders)
      summary: Criando um novo pedido
      description: Cria um novo pedido
      operationId: post-orders
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Order.yaml
    parameters: []
  '/orders/{id}':
    put:
      tags:
        - Pedidos (orders)
      summary: Atualizando um pedido
      description: Atualiza um pedido
      operationId: put-orders-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Order.yaml
    get:
      tags:
        - Pedidos (orders)
      summary: Consultando um pedido
      description: Consulta um pedido
      operationId: get-orders-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Order.yaml
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: Número do Pedido
  /orderitems:
    get:
      summary: Lista de itens de um pedido
      tags:
        - Pedidos (orders)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/OrderItem.yaml
      operationId: get-orderitems
      description: Filtro "numero_pedido" é obrigatório.
      parameters:
        - in: query
          name: filter
          description: Filtros
          required: true
          schema:
            default: '{"numero_pedido":999999}'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Insere um item em um pedido
      operationId: post-orderitems
      responses:
        '200':
          description: OK
      description: 'Insere um item em um pedido. Se o `vuncom` (valor unitário) não for informado, usa o preço de tabela.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/OrderItem.yaml
      tags:
        - Pedidos (orders)
  '/orderitems/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id do item de um pedido
    get:
      summary: Consulta um item de um pedido
      tags:
        - Pedidos (orders)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/OrderItem.yaml
      operationId: get-orderitems-id
      description: Consulta (para edição) um item de um pedido
    put:
      summary: Atualiza um item de um pedido
      operationId: put-orderitems-id
      responses:
        '200':
          description: OK
      description: Modifica um item de um pedido
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/OrderItem.yaml
      tags:
        - Pedidos (orders)
    delete:
      summary: Remove um item de um pedido
      operationId: delete-orderitems-id
      responses:
        '200':
          description: OK
      description: Remove um item de um pedido
      tags:
        - Pedidos (orders)
  /ordercheckitems:
    get:
      summary: Lista de SKU separados/conferidos
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/OrderCheckItem.yaml
      operationId: get-ordercheckitems
      description: Lista de SKU de um pedido para separação. O filtro `numero_pedido` é obrigatório.
      parameters:
        - $ref: '#/components/parameters/Filter'
      tags:
        - Pedidos por SKU (orderchecks)
  '/ordercheckitems/{numped}':
    parameters:
      - schema:
          type: string
        name: numped
        in: path
        required: true
        description: Número do pedido
    put:
      summary: Conferência de saída
      tags:
        - Pedidos por SKU (orderchecks)
      responses:
        '200':
          description: OK
      operationId: put-ordercheckitems-numped
      description: 'Confere um item de um pedido, colocando-o dentro de um volume.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                codigo:
                  type: integer
                  description: Código de barras ou código do produto
                  writeOnly: true
                qtd_conf:
                  type: integer
                  description: Quantidade conferida
                  default: 1
                  writeOnly: true
                volume:
                  type: integer
                  description: Volume onde o SKU conferido será empacotado
                  writeOnly: true
              required:
                - codigo
                - volume
  /operations:
    get:
      summary: Tipos de pedidos (Operações)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Operacoes.yaml
      operationId: get-operations
      description: Operações (tipos de pedidos)
      parameters:
        - $ref: '#/components/parameters/Filter'
      tags:
        - Pedidos (orders)
  /paymentcodes:
    get:
      summary: Listando formas de quitação
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Forma-Quitacao.yaml
      operationId: get-paymentcodes
      description: |
        Lista de formas de quitação

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | id da forma quitação| 
        | todos | boolean | Padrão False, trazendo somente as formas de quitação ativas | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Formas de Quitação (paymentcodes)
    post:
      summary: Criando uma forma de quitação
      operationId: post-paymentcodes
      responses:
        '200':
          description: OK
      description: Cria uma nova forma de quitação
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Forma-Quitacao.yaml
      tags:
        - Formas de Quitação (paymentcodes)
    parameters: []
  '/paymentcodes/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id da forma de quitação
    get:
      summary: Consultando uma forma de quitação
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Forma-Quitacao.yaml
      operationId: get-paymentcodes-id
      description: Consulta uma forma de pagamento
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Formas de Quitação (paymentcodes)
    put:
      summary: Atualizando uma forma de quitação
      operationId: put-paymentcodes-id
      responses:
        '200':
          description: OK
      description: Atualiza uma forma de quitação
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Forma-Quitacao.yaml
        description: ''
      tags:
        - Formas de Quitação (paymentcodes)
    delete:
      summary: Excluindo uma forma de quitação
      operationId: delete-paymentcodes-id
      responses:
        '200':
          description: OK
      description: Exclui uma forma de quitação.
      tags:
        - Formas de Quitação (paymentcodes)
  /persons:
    get:
      summary: Lista de Pessoas
      tags:
        - Pessoas (persons)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Persons.yaml
      operationId: get-persons
      description: |
        Listagem de Pessoas. Principais filtros:
        - `pesquisa` (string) Pesquisa tanto por ID/Nome/CPF/CNPJ/Telefone ou E-mail
        - `nome_exato` (bool) Pesquisa exata da descrição em conjunto com o filtro "pesquisa"
        - `inativos` (bool) Incluir na visualização as pessoas inativas
        - `id_canal` (integer) id do canal
        - `inconsistentes` (bool) usado nas integrações quando o cadastro está inconsistente. Ex. Email inválido
        - `logradouro` (string) Rua/Avenida/etc do endereço
        - `credito_loja` (bool) Possuir crédito Loja
      requestBody:
        content: {}
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Cria uma nova Pessoa
      operationId: post-persons
      responses:
        '200':
          description: OK
      description: Criação de uma nova Pessoa
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PersonsGetOne.yaml
      tags:
        - Ordens de Compra (purchaseorders)
    parameters: []
  '/persons/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID da Pessoa
    put:
      summary: Atualiza uma Pessoa
      tags:
        - Pessoas (persons)
      responses:
        '200':
          description: OK
      operationId: put-persons-id
      description: Atualiza uma Pessoa
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Persons.yaml
    get:
      summary: Carrega uma Pessoa
      tags:
        - Pessoas (persons)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/PersonsGetOne.yaml
      operationId: get-persons-id
      description: Consulta uma Pessoa
    delete:
      summary: Deleta uma Pessoa
      operationId: delete-persons-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/PersonsGetOne.yaml
      description: Inativa uma Pessoa
      tags:
        - Pessoas (persons)
  /ping:
    get:
      summary: Verificando servidor
      tags:
        - Login
      operationId: get-ping
      description: Verifica se o servidor está online
      security: []
      responses:
        '200':
          description: Sucesso
          headers: {}
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  resp:
                    type: string
                    minLength: 1
                    description: Resposta (OK)
                required:
                  - resp
    parameters: []
  /pricelistarticles:
    post:
      summary: Grava o preço de um item de uma lista de preços
      tags:
        - Listas de Preços (pricelists)
      responses:
        '200':
          description: OK
      operationId: post-pricelistarticles
      description: Cria um novo preço de um produto em uma lista de preços
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PLU-Item.yaml
    get:
      summary: Consulta os preços de uma lista de preços
      tags:
        - Listas de Preços (pricelists)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/PLU-Item.yaml
      operationId: get-pricelistarticles
      description: |-
        Lista os preços de uma lista de preços. Filtros:
        - `id_plu`: ID do PLU (Lista de Preços)
        - `cod_produto`: Código de um produto
        - `desc_produto`: Descrição de produto
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
  '/pricelistarticles/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id do registro
    get:
      summary: 'ITEM: Consultar produto x PLU'
      tags:
        - Listas de Preços (pricelists)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/PLU-Item.yaml
      operationId: get-pricelistarticles-id
      description: Consulta um preço de um PLU
    put:
      summary: Atualiza um item de lista de preços
      operationId: put-pricelistarticles-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PLU-Item.yaml
      description: Altera um registro na lista de preços
      tags:
        - Listas de Preços (pricelists)
  /pricelists:
    get:
      summary: Listando as Listas de Preços (PLU)
      tags:
        - Listas de Preços (pricelists)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/PLU.yaml
      operationId: get-pricelists
      description: Lista os PLUs
    post:
      summary: Criando uma nova Lista de Preços (PLU)
      operationId: post-pricelists
      responses:
        '200':
          description: OK
      description: Cria uma nova Lista de Preços (PLU)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PLU.yaml
      tags:
        - Listas de Preços (pricelists)
  '/pricelists/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id da lista de preço
    get:
      summary: Consultando uma Lista de Preços (PLU)
      tags:
        - Listas de Preços (pricelists)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/PLU.yaml
      operationId: get-pricelists-id
      parameters: []
      description: Consulta uma lista de preços
    put:
      summary: Atualizando uma Lista de Preços (PLU)
      operationId: put-pricelists-id
      responses:
        '200':
          description: OK
      description: Atualiza dados de uma lista de preços
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PLU.yaml
      tags:
        - Listas de Preços (pricelists)
    delete:
      summary: Excluindo uma Lista de Preços (PLU)
      operationId: delete-pricelists-id
      responses:
        '200':
          description: OK
      tags:
        - Listas de Preços (pricelists)
      description: Exclui uma lista de preços
  /productimages:
    get:
      summary: Lista de fotos de um produto
      tags:
        - Fotos de Produtos (productimages)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/ProductImage.yaml
      operationId: get-productimages
      description: |-
        Lista de fotos de um produto ou SKU. Filtros:
        - `cod_produto`: código do produto (embalagem)
        - `codigo_sku`: código do SKU
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Envia uma foto de produto
      tags:
        - Fotos de Produtos (productimages)
      responses:
        '200':
          description: OK
      operationId: post-productimages
      description: Envia uma foto (em base64) de um produto.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/ProductImage.yaml
  /products:
    parameters: []
    get:
      summary: Listando Produtos
      operationId: get-products
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/ProductsGetList.yaml
        description: ''
      description: |
        Lista de produtos

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | Código do Produto (SKU)| 
        | ids | []int64 | Array de códigos de Produtos (SKU)| 
        | inativos | bool | Padrão é filtrar somente os ativos | 
        | cod_produto | int64 | Código de produto podendo ser embalagem| 
        | com_variacoes | bool | Somente os produtos onde há variações (cont_skus > 1) | 
        | id_categoria | int64 | Id da categoria do produto | 
        | codigo_descricao | string | Código de barras, Descrição ou Código do produto | 
        | ncm_vencido | bool | Produtos onde o fim_vigencia < Data Atual) | 
        | id_grade | int64 | ID da grade do Produto | 
        | idpessoa_fantasia_cpf_cnpj | string | Filtro pelo código, nome ou CNPJ do fornecedor | 
        | q | string | Descrição do produto | 
        | numero_pedido | int64 | Produtos que estão nesse pedido | 
        | expo_sem_arroba | bool |  Filtra os produtos que não possuem endereço no A@ | 
        | id_empresa | int |  Ao filtrar o expo_sem_arroba é necessário informar o id_empresa | 
        | referencia | string | Referência geralmente oriunda do fornecedor | 
        | cross_docking | bool |  Traz somente os skus que possuem os produtos que foram definidos as embalagem como cross-docking | 
      tags:
        - Produtos (products)
    put:
      summary: Atualiza um produto
      tags:
        - Produtos (products)
      responses:
        '200':
          description: OK
      operationId: put-products
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/ProductsGetOne.yaml
      description: Atualiza um produto
  '/purchasemappings/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id do mapeamento
    get:
      summary: Consultando uma memória de mapeamento
      tags:
        - Mapeamentos (purchasemappings)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/SKU-Mapeamento.yaml
      operationId: get-purchasemappings-id
      description: |
        Consulta uma memória de Mapeamento Produto x Fornecedor
    put:
      summary: Atualizando uma memória de mapeamento
      operationId: put-purchasemappings-id
      responses:
        '200':
          description: OK
      tags:
        - Mapeamentos (purchasemappings)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SKU-Mapeamento.yaml
      description: Atualiza uma memória de mapeamento produto x fornecedor
  /purchasemappings:
    get:
      summary: Memória de mapeamentos
      tags:
        - Mapeamentos (purchasemappings)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/SKU-Mapeamento.yaml
      operationId: get-purchasemappings
      description: |-
        Listagem de mapeamentos memorizados de um produto (ou fornecedor). Quando um XML é carregado, o sistema pesquisa nessa memória para fazer o mapeamento automaticamente.

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | codigo_sku | int | Código SKU do produto | 
        | cod_produto | int | Código do Produto  | 
        | referencia | string | Referência | 
        | variacao | string | Variação | 
        | cnpj_fornec | int | CNPJ do Fornecedor | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Criando uma memória de mapeamento
      operationId: post-purchasemappings
      responses:
        '200':
          description: OK
      tags:
        - Mapeamentos (purchasemappings)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SKU-Mapeamento.yaml
      description: Cria uma nova memória de mapeamento produto x fornecedor
  /purchaseorders:
    get:
      summary: Lista Ordens de Compra
      tags:
        - Ordens de Compra (purchaseorders)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/PurchaseOrder.yaml
      operationId: get-purchaseorders
      description: |-
        Listagem de OC

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | Identificador único | 
        | ids | []int64 | Array de identificadores único | 
        | codigo_legado | string | Código Legado de um sistema integrado ou migrado  | 
        | numero | int | Número da NF de Compra |
        | notas | string | Número das NF's de Compra separados por vírgula  | 
        | pendente_erp | bool | Oculta os registros pendente ERP. Usado em integração  | 
        | atendidas | bool | Por padrão traz somente dos status diferente de 190-OC Atendidas. Ao ser verdadeiro traz todos | 
        | todas | bool | Traz todos status, inclusive os status 199  | 
        | minhas_ocs | bool | Traz as Ocs do usuário logado | 
        | idpessoa_fantasia_cpf_cnpj | string | Pode se filtrar pelo CPF ou CNPJ, pelo id_pessoa, nome do fornecedor, nome razao ou nome fantasia  | 
        | cpf_cnpj | int64 | CPF ou CNPJ |
        | nome_razao | string | Nome Razão | 
        | vetor_status | []int64 | Array de Status |
        | dias | int64 | Também utilizado como alterações efetuados dos último x dias, porém podendo filtrar mais campos |
        | vetor_sku | string | Códigos de SKU's separados por vírgula |
        | dias_alteracao | int | usado em integração. Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. | 
    post:
      summary: Cria uma nova OC
      operationId: post-purchaseorders
      responses:
        '200':
          description: OK
      description: Criação de uma nova Ordem de Compra
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PurchaseOrderGetOne.yaml
      tags:
        - Ordens de Compra (purchaseorders)
  '/purchaseorders/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Número da OC
    get:
      summary: Consulta uma Ordem de Compra
      tags:
        - Ordens de Compra (purchaseorders)
      operationId: get-purchaseorders-id
      description: Consulta uma Ordem de Compra
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/PurchaseOrderGetOne.yaml
    put:
      summary: Atualiza uma Ordem de Compra
      tags:
        - Ordens de Compra (purchaseorders)
      responses:
        '200':
          description: OK
      operationId: put-purchaseorders-id
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PurchaseOrderGetOne.yaml
      description: Atualiza uma ordem compra
    delete:
      summary: Deleta uma Ordem de Compra
      tags:
        - Recepção de Nota (receptions)
      responses:
        '200':
          description: OK
      operationId: delete-purchaseorders-id
      description: Deleta uma Ordem de Compra
  /purchases:
    get:
      summary: Listagem de NF de Compra
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Purchase.yaml
      operationId: get-purchases
      description: |-
        Lista as NF de Compra

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | Identificador único | 
        | ids | []int64 | Array de identificadores único | 
        | chnfe | string | Chave de acesso com os 44 caracteres | 
        | numero | int64 | Número da NF | 
        | serie | int64 | Série da NF. Deve ser usado juntamente como o filtro "numero", explicado acima | 
        | vetor_numero | string | Vetor de números de NF | 
        | cod_sku | int64 | Filtro por código SKU, ou seja, o produto base | 
        | vetor_sku | string | Vetor de códigos de SKU | 
        | dataini | string | Formato: YYYY/MM/DD, se não informar busca a data atual. Data emissão | 
        | datafim | string | Formato: YYYY/MM/DD  | 
        | ocultar_impostos_ok | bool | Oculta os registros onde os impostos não foram dados como "OK"  | 
        | ocultar_precos_ok | bool | Oculta os registros onde os preços não foram dados como "OK"  | 
        | pendente_leitura_num_serie | bool | Oculta os registros sem leitura do numero de série onde skus_ns > ns_lidos | 
        | pendente_mapeamento | bool | Oculta os registros onde o mapeamento não ficou 100%  | 
        | pendente_erp | bool | Oculta os registros pendente ERP. Usado em integração  | 
        | pendente_validacao | bool | Oculta os registros pendente de validação  | 
        | pendente_precificacao | bool | Oculta os registros pendente de precificação  | 
        | pendente_cta_pagar | bool | Oculta os registros pendente de serem lançados no contas a pagar  | 
        | inconsistentes | bool | Oculta os registros com inconsistências |
        | sem_vinculo | bool | Oculta os registros sem vínculo com ordem de compra (OC)  | 
        | id_empresa | int | ID da Empresa Destino|
        | dest | string | Sigla Loja da Empresa Destino | 
        | uf_emit | string | Estado (UF) das notas emitidas  | 
        | idpessoa_fantasia_cpf_cnpj | string | Pode se filtrar pelo CPF ou CNPJ, pelo id_pessoa, nome do fornecedor, nome razao ou nome fantasia  | 
        | id_pessoa | int64 | ID da Pessoa |
        | cpf_cnpj | int64 | CPF ou CNPJ |
        | vetor_status | []int64 | Array de Status |
        | todas | bool | Traz todos status, inclusive os status 202, 290 e 299  | 
        | nf_acima_de_1000 | float64 | Traz todos os registros com total de valor NF acima de 1000 |
        | sem_conf_mercad | bool | Traz os registros sem a confirmação de mercadoria |
        | sem_conf_valores | bool | Traz os registros sem a confirmação de valores |
        | dias_alteracao | int | usado em integração. Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. | 
      tags:
        - Entrada de NF (purchases)
    post:
      summary: Enviar o XML de uma NF de Compra
      responses:
        '200':
          description: OK
      operationId: post-purchases
      description: Envia o XML de uma NF de Compra
      tags:
        - Entrada de NF (purchases)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                files:
                  type: array
                  description: Vetor de notas fiscais
                  items:
                    type: object
                    properties:
                      conteudo:
                        type: string
                        description: XML da NFe
                    required:
                      - conteudo
              required:
                - files
  '/purchases/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID da compra
    put:
      summary: Atualiza uma NF de Compra
      tags:
        - Entrada de NF (purchases)
      responses:
        '200':
          description: OK
      operationId: put-purchases-id
      description: Atualiza uma NF de compra
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Purchase.yaml
    get:
      summary: Carrega uma NF de Compra
      tags:
        - Entrada de NF (purchases)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Purchase.yaml
      operationId: get-purchases-id
      description: Consulta uma NF de compra
  /purchaseitems:
    get:
      summary: Lista de itens de uma NF de Fornecedor
      tags:
        - Entrada de NF (purchases)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/PurchaseItem.yaml
      operationId: get-purchaseitems
      description: 'Itens de uma NF de Fornecedor. Filtro obrigatório: `id_compra` (ID da purchases).'
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
  '/purchaseitems/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID do item da NF
    put:
      summary: Mapeamento/desdobramento de item de NF
      tags:
        - Entrada de NF (purchases)
      responses:
        '200':
          description: OK
      operationId: put-purchaseitems-id
      description: |-
        Permite fazer o mapeamento e/ou desdobramento dos itens de uma NF (que foi carregada via XML).
        - Mapeamento: cruzamento entre `cProd` que vem no XML com `cod_produto` do sistema. O vínculo é feito em nível de SKU: quantidade (campo `quant_sku`) e valor unitário (campo `vunit_sku`) serão calculados automaticamente. 
        - Desdobramento: quando um Fornecedor manda um único item contendo produtos diferentes, por exemplo vem na NF "100 camisetas de cores sortidas" mas na verdade vieram 20 vermelhas, 30 amarelas e 50 brancas.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PurchaseItem.yaml
    get:
      summary: Consulta um item de uma NF
      tags:
        - Entrada de NF (purchases)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/PurchaseItem.yaml
      operationId: get-purchaseitems-id
      description: 'Consulta um item de uma NF. Se ele estiver mapeado, "codigo_sku" está presente. Se ele tiver desdobramentos, o array "desdobramento" estará preenchido.'
  /purchaseshareitems:
    get:
      summary: Rateio de Verbas Compra
      tags:
        - Rateio de Compras (purchaseshareitems)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/PurchaseOrder.yaml
      operationId: get-purchaseshareitems
      description: |
        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | Identificador único | 
        | ids | []int64 | Array de identificadores único | 
        | id_compra | int64 | ID da Compra | 
        | numero | int | Número da NF | 
        | id_fornec | int64 | ID do fornecedor | 
        | codigo_sku | int64 | Código SKU | 
        | descricao | int64 | Descrição do produto (xprod) | 
        | dataini | string | Data Inicial | 
        | datafim | string | Data Final | 
        | dias_alteracao | int | Ex: 0 = dados do dia, 1 = De ontem até hoje | 
        | filtrar_por | string | Podendo selecionar por "data_alteracao" ou "data_vencimento" (padrão) | 


        Os campos id_compra e/ou id_fornec e/ou codigo_sku e/ou descricao é obrigatório o filtro, caso contrário não traz os dado
  /prospects:
    post:
      summary: Cria uma nova Prospecção (Experimente)
      tags:
        - Prospectos (prospects)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Prospects-2.yaml
      operationId: post-prospects
      x-stoplight:
        id: rbk0bmn3bzzus
      description: |
        Cria uma nova prospecção.

        Funciona por etapas (pagina): 

         - Um post com a "pagina":1 com alguns campos obrigatórios 
         - e após com "pagina": 2 com demais campos
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Prospects-1.yaml
  /receptions:
    get:
      summary: Listagem de RN
      tags:
        - Recepção de Nota (receptions)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Reception.yaml
      operationId: get-receptions
      description: |-
        Lista as RN

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id_empresa | int | ID da Empresa | 
        | status | int | Status / Status Inicial  | 
        | status_max | int | Status Final  | 
        | numero_nf | int | Número NF | 
        | conferir | bool | Conferir. status (300 e 320) do usuário logado ou status = 310 | 
        | inativos | bool | Por padrão traz somente os ativos, ou seja, status < 399 |
        | dias_alteracao | int | usado em integração, se = 1 pega do dia atual, se = 2 pega do dia anterior e o atual | 
    post:
      summary: Criar uma RN
      tags:
        - Recepção de Nota (receptions)
      responses:
        '200':
          description: OK
      operationId: post-receptions
      description: Cria uma nova RN
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Reception.yaml
    parameters: []
  '/receptions/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id da RN
    get:
      summary: Consulta uma RN
      tags:
        - Recepção de Nota (receptions)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Reception.yaml
      operationId: get-receptions-id
      description: Consulta uma RN
    put:
      summary: Atualiza uma RN
      tags:
        - Recepção de Nota (receptions)
      responses:
        '200':
          description: OK
      operationId: put-receptions-id
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Reception.yaml
      description: Atualiza uma RN
    delete:
      summary: Cancela uma RN
      tags:
        - Recepção de Nota (receptions)
      responses:
        '200':
          description: OK
      operationId: delete-receptions-id
      description: Cancela uma RN
  /sales:
    get:
      summary: Listando pedidos de Venda
      description: |
        Lista de pedidos tipo VENDA 

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | dias | int | se nulo ou 0 pega 10 dias para trás. Tem prioridade sobre o filtro dias_alteracao | 
        | dias_alteracao | int | usado em integração, se = 1 pega do dia atual, se = 2 pega do dia anterior e o atual | 
        | etapa | int | ID da etapa Ex: 500 = Edição, 600 = Manuseio ou 700 = Expedição |
        | pesquisa | string | Pesquisa tanto por id_pessoa, Nome Razão ou CPF/CNPJ |
        | id_externo | string | ID do pedido Externo |
        | id_vendedor | int64 | ID do Vendedor |
        | valor | number | Valor exato do total da venda (vtotal) |
        | criados_por_mim | bool | Somentes os pedidos criados por mim |
        | meus_clientes | bool | Somentes os pedidos dos meus clientes |
        | meus_pedidos | bool | Somentes os meus pedidos, onde internamente filtra pelo id_vendedor do usuário que fez a requisição, porém se não achar filtra os pedidos cujo a última alteração do pedido fora feita por mim  |
        | chnfe_gerada | string | Chave de acesso gerada|
        | lista_num_nf | string | Somentes os pedidos criados por mim |
        | vetor_num_nf | []int | Vetor de Número NF's com o objetivo de filtrar uma ou mais NF's |
        | vetor_empresa | []int64 | Vetor de id_empresa com o objetivo de filtrar uma ou mais empresas |
        | vetor_status | []int64 | Vetor de Status do pedido, podendo ser mais de um status |
        | id_mesa | int64 | ID da mesa |
        | ids_tags | []int64 | Tags dos Pedidos |
        | todos | bool | Traz também os pedidos cancelados |
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      operationId: get-sales
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Sales.yaml
      tags:
        - Pedidos Venda (sales)
    post:
      summary: Criando um novo pedido de Venda
      description: Cria um novo pedido Venda
      operationId: post-sales
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Sales.yaml
      tags:
        - Pedidos Venda (sales)
    parameters: []
  '/sales/{id}':
    put:
      tags:
        - Pedidos (orders)
      summary: Atualizando um pedido de venda
      description: Atualiza um pedido de venda
      operationId: put-sales-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Sales.yaml
    get:
      summary: Consultando um pedido de Venda
      description: Consulta um pedido de venda
      operationId: get-sales-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Sales.yaml
      tags:
        - Pedidos Venda (sales)
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: Número do Pedido
  '/salespersons/{id}':
    put:
      summary: Atualizando um vendedor
      description: Atualiza um vendedor
      operationId: put-salepersons-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SalesPerson.yaml
      x-stoplight:
        id: 2tdqkfhevacxu
      tags:
        - Vendedores (salespersons)
    get:
      summary: Consultando um vendedor
      description: Consulta um vendedor
      operationId: get-salepersons-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/SalesPerson.yaml
      x-stoplight:
        id: 83qrawis21gil
      tags:
        - Vendedores (salespersons)
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: Número do Pedido
  /salespersons:
    post:
      summary: Grava Vendedor
      responses:
        '200':
          description: OK
      operationId: post-salespersons
      description: Cria um vendedor
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SalesPerson.yaml
      x-stoplight:
        id: 0stqo5xyk0xlh
      tags:
        - Vendedores (salespersons)
    get:
      summary: Consulta os Vendedores
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/SalesPerson.yaml
      operationId: get-salespersons
      description: |
        Lista de vendedores

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | Identificador único | 
        | ids | []int64 | Array de identificadores único | 
        | id_canal | int64 | ID do Canal | 
        | inativos | int64 | Por padrão traz somente os vendedores ativos | 
        | nome_vendedor | string | Filtro pelo nome do vendedor | 
        | id_vendedor | int64 | Filtro pelo ID do Vendedor | 
        | dias_alteracao | int64 | Ex. 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. | 
        | ramal | string | Filtro pelo Ramal do Vendedor | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      x-stoplight:
        id: oynghtgky966v
      tags:
        - Vendedores (salespersons)
    parameters: []
  '/portfolios/{id}':
    put:
      summary: Atualizando uma carteira
      description: Atualiza um vendedor
      operationId: put-portfolios-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Portfolios.yaml
      x-stoplight:
        id: isw8jciyb0nm7
      tags:
        - Carteiras (portfolios)
    get:
      summary: Consultando uma carteira
      description: Consulta uma carteira
      operationId: get-portfolios-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Portfolios.yaml
      tags:
        - Carteiras (portfolios)
      x-stoplight:
        id: 4s36h3pdriljh
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: Número do Pedido
  /portfolios:
    post:
      summary: Grava Carteira
      responses:
        '200':
          description: OK
      operationId: post-portfolios
      description: Cria uma carteira de cliente
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Portfolios.yaml
      x-stoplight:
        id: edzzokp2n987g
      tags:
        - Carteiras (portfolios)
    get:
      summary: Consulta de Carteiras
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Portfolios.yaml
      operationId: get-portfolios
      description: |-
        Lista de carteiras

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | Identificador único | 
        | ids | []int64 | Array de identificadores único | 
        | id_vendedor | int64 | ID do Vendedor | 
        | id_pessoa | int64 | ID da Pessoa | 
        | id_canal | int64 | ID do Canal | 
        | inativas | int64 | Por padrão traz somente os carteira ativas | 
        | sem_cliente | bool | Traz as carteira sem clientes | 
        | ids_tags | []int64 | Filtro pelo IDs Tags | 
        | pesquisa | string | ID ou nome da carteira |
        | dias_alteracao | int64 | Ex. 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      x-stoplight:
        id: faicrm3lp1ex5
      tags:
        - Carteiras (portfolios)
    parameters: []
  '/portfoliocustomers/{id}':
    put:
      summary: Atualizando uma carteira
      description: Atualiza um vendedor
      operationId: put-portfoliocustomers-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PortfolioCustomers.yaml
      x-stoplight:
        id: isw8jciyb0nm7
      tags:
        - Clientes de Carteira (portfoliocustomers)
    get:
      summary: Consultando um cliente com carteira
      description: Consulta um cliente com carteira
      operationId: get-portfoliocustomers-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/PortfolioCustomers.yaml
      tags:
        - Clientes de Carteira (portfoliocustomers)
      x-stoplight:
        id: 4s36h3pdriljh
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: Número do Pedido
  /portfoliocustomers:
    post:
      summary: Grava Cliente de Carteira
      responses:
        '200':
          description: OK
      operationId: post-portfoliocustomers
      description: Cria uma carteira de cliente
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PortfolioCustomers.yaml
      x-stoplight:
        id: edzzokp2n987g
      tags:
        - Clientes de Carteira (portfoliocustomers)
    get:
      summary: Consulta Clientes de Carteira
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/PortfolioCustomers.yaml
      operationId: get-portfoliocustomers
      description: |-
        Lista de carteiras

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | Identificador único | 
        | ids | []int64 | Array de identificadores único | 
        | id_vendedor | int64 | ID do Vendedor | 
        | id_pessoa | int64 | ID da Pessoa | 
        | id_carteira | int64 | ID da Carteira | 
        | id_etapa | int64 | ID da Etapa | 
        | carteira | string | Nome da Carteira ou nome_vendedor | 
        | cliente | string | Nome do Cliente | 
        | duplicados | bool | Mostra os clientes/pessoas duplicadas em mais de uma carteira, caso existir |
        | dias_alteracao | int64 | Ex. 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      x-stoplight:
        id: faicrm3lp1ex5
      tags:
        - Clientes de Carteira (portfoliocustomers)
    parameters: []
  /scmprojectionlogs:
    get:
      summary: SCM Log das Projeções
      tags:
        - SCM Log Projeções (scmprojectionlogs)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/ScmProjectionLogs.yaml
      operationId: get-scmprojectionlogs
      description: |
        Logs das Projeções do SCM

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int | ID - Identificador Unico |
        | ids | []int | Array de ID's - Identificador Unico |
        | codigo_sku | int | Pesquisa pelo código do sku |
        | id_empresa | int | ID da Empresa |
        | dias_alteracao | int | usado em integração, se = 1 pega do dia atual, se = 2 pega do dia anterior e o atual | 
        | data_ini | string | Data Inicial da última alteração |
        | data_fim | string | Data Final da última alteração |
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
  /services:
    get:
      summary: Listagem de serviços
      tags:
        - Serviços (services)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Services.yaml
      operationId: get-services
      description: Lista de serviços ativos
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Cria um novo serviço
      tags:
        - Serviços (services)
      responses:
        '200':
          description: OK
      operationId: post-services
      description: Cria um novo serviço
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Services.yaml
  /skus:
    get:
      summary: Listando produtos (SKUs)
      tags:
        - Produtos (skus)
      operationId: get-skus
      description: |
        Lista de produtos

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | codigo | int64 | código do Produto (SKU)| 
        | id_categ | int64 | ID da categoria produto | 
        | inativos | bool |  padrão é filtrar somente os ativos| 
        | ncm_vencido | bool |  fim da vigência menor que a data atual| 
        | q | string | descrição do produto | 
        | fornecedor | string | nome do fornecedor | 
        | numero_pedido | int64 | produtos que estão nesse pedido| 
        | barcode | int64 | código de barras (pode ser Produto ou Endereço de Estoque) | 
        | id_grade | int64 |  Código da grade de produto (variações) |
        | dias_alteracao | int | usado em integração. Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Sku.yaml
    post:
      summary: Criando um produto (SKU)
      operationId: post-skus
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Sku.yaml
      description: Cria um SKU
      tags:
        - Produtos (skus)
  '/skus/{id}':
    get:
      summary: Consultando um produto (SKU)
      tags:
        - Produtos (skus)
      operationId: get-skus-id
      parameters: []
      description: Mostra um produto já existente
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Sku.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    description: Mensagem de Erro
                required:
                  - message
    put:
      summary: Atualizando um produto (SKU)
      operationId: put-skus-id
      responses:
        '200':
          description: OK
      tags:
        - Produtos (skus)
      description: Atualiza um produto já existente
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Sku.yaml
    delete:
      summary: Excluindo um produto (SKU)
      operationId: delete-skus-id
      responses:
        '200':
          description: OK
      tags:
        - Produtos (skus)
      description: Exclui um produto já existente
    parameters:
      - schema:
          type: integer
          default: 5
        name: id
        in: path
        description: Código do produto (SKU)
        required: true
  /skuconfigs:
    get:
      summary: Listando Configuração do sku X empresa (SkuConfigs)
      operationId: get-skuconfigs
      description: |-
        Lista de configuração de sku x empresa (mostra também o cmm (consumo médio mensal))

        A entidade é constituída de duas partes:
        1) os campos da fórmula do CMM ( SOMENTE LEITURA pois é calculado). São eles:
          - dias_estoq, quant_mes, ticket_mes, valor_mes, qtd_natural 

        2) os campos da configuração ( EDITADOS). São eles: 
          - sazo_efet, quant_expo, total_sazo, es_minimo, quant_camp, cmmf_quant, cmmf_validade

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | codigo_sku | int64 | código do Produto (SKU)| 
        | id_empresa | int64 | ID da empresa | 
        | vetor_empresa | int64 | IDs das empresas | 
        | numero_pedido | int64 | Pelo número do pedido pega os itens do sku | 
        | capac_zerada | bool | Itens com capacidade zerada. Necessário filtro do id_empresa | 
        | encalhado | bool | Traz os itens encalhados por empresa. Necessário filtro do id_empresa | 
        | sem_expo | bool | Traz os itens sem exposição. Necessário filtro do id_empresa | 
        | inativos | bool | Somente os itens inativos | 
        | todos | bool | Traz todos os itens, mesmo os inativos | 
        | lojas_fechadas | bool | Falso traz todas lojas abertas | 
        | id_categoria | int64 | ID da Categoria | 
        | categoria | string | Desc. Categoria | 
        | id_nivel | int | Nivel da categori. Usado juntamente com o filtro do categoria | 
        | nome_tag | string | Nome tag. Ex: Fora de Linha, Escolar, Liquidação, etc  (Tag Produto) | 
        | ids_tags | []int64 | ids_tags do produto | 
        | arroba_zerado | bool | A@ com estoque zerado | 
        | somente_com_estoque_bz | bool | Somente com estoque nos endereços B-Z | 
        | dias_alteracao | int | Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. Lembrar que o filtro tipo é obrigatório | 
        | sku_ini | int64 | código Inicial do SKU. Geralmente usado na exportação para limite de 10.000 registros | 
        | sku_fim | int64 | código Final do SKU. Geralmente usado na exportação para limite de 10.000 registros | 
      parameters:
        - in: query
          name: filter
          description: Filtro
          schema:
            default: '{"codigo_sku":5}'
          required: true
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/SKU-Configs.yaml
      tags:
        - Produtos (skuconfigs)
    post:
      summary: Criando configuração do sku X empresa (SKUConfigs)
      operationId: post-skuconfigs
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SKU-Configs.yaml
      description: |-
        Cria um SKUConfig.

        ----

        Possui também o modo ajustes onde passando o campo "Ajuste" no POST é possível editar a capacidade do ZZ em massa.
        Campo: ajuste
        Parâmetros: lojas, capac_zz e expo_min

        Exemplo: O objetivo é alterar a capacidade do Z para 999999 de todos os SKU ativos com Expo das lojas 40, 21, 30, 43, 1 (VLT) e 47.
        Caso não tenha a capacidade o sistema cria automaticamente.

        curl -g -X POST 'https://rnge.com.br:8091/v2/skuconfigs' -d '{"ajuste":{"lojas": [40, 21, 30, 43, 1, 47], "capac_zz":999999, "expo_min":1}}' --user 10334:xxx | jq .
        Tempo: 0:02:15
        {
          "contador": 1064,
          "erros": 93,
          "ult_erro": "pq: Acesso negado 3425 (Emp 30): SKU Configuração - Editar Capacidade ZZ"
        }

        Obs.: Quando apresentar erro, por exemplo por não ter acesso, é informado no 
        campo "ult_erro", e os que deram certo é informado a quantidade 
        de registros alterados na coluna "contador"
      tags:
        - Produtos (skuconfigs)
    parameters: []
  '/skuconfigs/{id}':
    get:
      summary: Consultando uma configuração do sku X empresa  (SKUconfigs)
      operationId: get-skusconfigs-id
      parameters: []
      description: Mostra um skuconfig já existente
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/SKU-Configs.yaml
      tags:
        - Produtos (skuconfigs)
    put:
      summary: Atualizando uma configuração do sku X empresa  (SKUConfigs)
      operationId: put-skuconfigs-id
      responses:
        '200':
          description: OK
      description: Atualiza um skuconfig já existente
      tags:
        - Produtos (skuconfigs)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SKU-Configs.yaml
    delete:
      summary: Excluindo uma configuração do sku X empresa  (SKUConfigs)
      operationId: delete-skusconfigs-id
      responses:
        '200':
          description: OK
      description: '"Exclui" um skuconfig já existente. O sistema não deleta o registro, apenas coloca nulo nos campos de configuração do sku x empresa, ou seja, os campos: sazo_efet, quant_expo, total_sazo, es_minimo, quant_camp, cmmf_quant, cmmf_validade são setados para nulo, e o campo interno config_compra é armazenado a data e o usuário que efetuou o ajuste.'
      tags:
        - Produtos (skuconfigs)
    parameters:
      - schema:
          type: integer
          default: 100
        name: id
        in: path
        description: ID que representa a configuração do sku x empresa
        required: true
  /skuarticles:
    get:
      summary: Listando mercadorias
      tags:
        - Produtos (skuarticles)
      operationId: get-skuarticles
      description: |
        Lista de mercadorias (SKUs e suas embalagens)

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | codigo_sku | int64 | código da mercadoria (ver filtro por embalagens)| 
        | embalagens | bool | deverá informar true para visualizar também as embalagens | 
        | numero_pedido | int64 | produtos que estão nesse pedido| 
        | codigo_descricao | string | Descrição da mercadoria, ou Se for numero então Se > 9999999 filtra por codigo de barras, senão pelo codigo mercadoria | 
        | fornecedor | string |  nome do fornecedor| 
        | marca | string |  nome da marca| 
        | ids_categ | []int64 | array de IDs de categorias | 
        | nivel | int | nivel da categoria | 
        | categoria | string | nome da categoria | 
        | fora_venda | bool |  incluir produtos que estão fora de venda? (padrão: false) |
        | referencia | string |  referência do código da mercadoria do fornecedor |
        | ncm | string |  código ncm |
        | barcode | int64 | código de barras|
        | user_id | int64 | ID do usuário que criou a mercadoria|
        | data_preco | string |  Data/Hora da ultima alteração do preco promocional ou mercadoria |
        | id_empresa | int |  utilizado para filtrar o estoque do predio |
        | dias_alteracao | int |  quantidade de dias em que houve alguma alteração |
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/SkuArticle.yaml
    post:
      summary: Criando uma mercadoria
      operationId: post-skuarticles
      responses:
        '200':
          description: OK
      description: Cria uma mercadoria (embalagem de um SKU)
      tags:
        - Produtos (skuarticles)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SkuArticle.yaml
    parameters: []
  '/skuarticles/{id}':
    get:
      summary: Consultando uma mercadoria
      tags:
        - Produtos (skuarticles)
      operationId: get-skuarticles-id
      parameters: []
      description: Mostra uma mercadoria já existente
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/SkuArticle.yaml
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    description: Mensagem de Erro
                required:
                  - message
    put:
      summary: Atualizando uma mercadoria
      operationId: put-skuarticles-id
      responses:
        '200':
          description: OK
      tags:
        - Produtos (skuarticles)
      description: Atualiza uma mercadoria já existente
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SkuArticle.yaml
    delete:
      summary: Excluindo uma mercadoria
      operationId: delete-skuarticles-id
      responses:
        '200':
          description: OK
      tags:
        - Produtos (skuarticles)
      description: Exclui uma mercadoria já existente
    parameters:
      - schema:
          type: integer
          default: 10888
        name: id
        in: path
        description: Código da mercadoria
        required: true
  /skureservations:
    get:
      summary: Listando Sku's Reserva Prédio
      operationId: get-skureservations
      description: |
        Lista dos estoques dos produtos reservados por prédio

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id_predio | int64 | código do Prédio (id_predio) | 
        | cod_produto | int64 | código do produto | 
        | codigo_sku | int64 |  código do sku | 
        | numero_pedido | int64 |  filtra os itens pelo número do Pedido | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/SkuReservations.yaml
      tags:
        - Sku Reserva Prédio (skureservations)
    parameters: []
  /timelines:
    get:
      summary: Listando os registros de alterações
      operationId: get-timelines
      description: |-
        Lista dos registros de alterações 

        Cada filtro é um tipo de dado (pedido, rastreamento, boleto, pix, grade, pessoa, oportunidade ou vale)

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id_pessoa | int64 | ID da pessoa do lead (contato) | 
        | numero_pedido | int64 | Número do pedido | 
        | codigo_alfa | string | Código Grade | 
        | cod_produto | int64 | Código Produto | 
        | id_boleto | int64 | ID do Boleto | 
        | id_pix | int64 | ID do Pix | 
        | id_rastreamento | int64 | ID do Rastreamento | 
        | id_vale | int64 | ID do Vale | 
        | id_deal | int64 | ID da Oportunidade | 
        | dias_alteracao | int | Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. Lembrar que o filtro tipo é obrigatório | 
        | tipo | string | Em conjunto com o filtro dias_alteracao, podendo ser tipo: PEDIDO, RASTREAMENTO, OPORTUNIDADE, GRADE, BOLETO, PIX, COMPRA, ORDEMCOMPRA, LINK ou PESSOA  | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Timelines.yaml
      x-stoplight:
        id: 0rwpm0aph5vhg
      tags:
        - Timelines (timelines)
    parameters: []
  '/skureservations/{id}':
    get:
      summary: Consultando um Sku Reserva Prédio
      description: Consulta Sku Reserva Prédio
      parameters:
        - schema:
            type: string
            default: Basic MTIzNDp1dWlkLXRva2Vu
          in: header
          description: 'ID:TOKEN'
          required: true
          name: Authorization
      operationId: get-skureservations-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/SkuReservations.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SkuReservations.yaml
      tags:
        - Sku Reserva Prédio (skureservations)
    parameters:
      - schema:
          type: integer
          minimum: 1
          default: 1
        name: id
        in: path
        required: true
        description: ID da reserva pedido
  /skustocks:
    get:
      summary: Listando endereços de estoque
      tags:
        - Estoque (skustocks)
      operationId: get-skustocks
      description: |
        Lista de endereços de estoque (SKU x Prédio x Setor)

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | cod_sku | int64 | código do Produto (SKU)| 
        | id_predio | int64 | ID do prédio | 
        | id_empresa | int64 |  Filtro por empresa. O id_predio tem prioridade sobre o id_empresa | 
        | setor_letra | string | Filtra os estoques de um setor |
        | numero_pedido | int64 |  Filtra o estoque dos itens do pedido| 
        | id_categoria | int64 | Filtra o estoque dos itens da categoria a ser filtrada | 
        | data_inicial | string | Data Inicial alteração de estoque | 
        | data_final | string | Data da última alteração de estoque| 
        | manutencao | string | Filtrar os "encalhados" ou "negativos" | 
        | id_recepcao | int64 | ID da recepção |
        | fornecedor | string | Nome do Fornecedor |
        | todos | bool | Por padrão traz somente os estoques diferentes de zero. Para trazer também os zerados deve-se colocar "todos" |
        | somente_zerados | bool | Somente com estoques zerados ou menores que zero |
        | arroba_zerado | bool | Somente os estoques com o setor A zerado |
        | tipo_virtual | int | Quando 35 = DISTRIB (Distribuição em trânsito), 36 = RMA (Retorno de Mercadoria), 37 = Descarte (Danificado aguardando descarte), 38 = PERDA, e quando 99 = todos |
        | pendente_erp | bool | Usado na integração |
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/SkuStock.yaml
    post:
      summary: Criando um endereço
      operationId: post-skustocks
      responses:
        '200':
          description: OK
      description: Cria um novo endereço de estoque
      tags:
        - Estoque (skustocks)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SkuStock.yaml
  '/skustocks/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID do endereço do estoque
    get:
      summary: Consultando um estoque
      tags:
        - Estoque (skustocks)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/SkuStock.yaml
      operationId: get-skustocks-id
      description: Consulta um endereço de estoque
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    put:
      summary: Atualizando um endereço
      operationId: put-skustocks-id
      responses:
        '200':
          description: OK
      description: Atualiza um endereço de estoque
      tags:
        - Estoque (skustocks)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SkuStock.yaml
        description: ''
    delete:
      summary: Excluindo um endereço
      operationId: delete-skustocks-id
      responses:
        '200':
          description: OK
      description: Exclui um endereço de estoque. Ele precisa estar vazio (quantidade zerada) para poder ser excluído.
      tags:
        - Estoque (skustocks)
  /kardexes:
    get:
      summary: Listando histórico do estoque
      tags:
        - Kardexes (kardexes)
      operationId: get-kardexes
      description: |-
        Histórico do estoque

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id_estoque | int64 | ID do Estoque | 
        | cod_sku | int64 | Código do Sku | 
        | id_predio | int64 | ID do Prédio | 
        | letras | string | Letras do Endereço do Estoque | 
        | tipo_virtual | string | Tipo Virtual | 
        | id_categoria | int64 | ID Categoria | 
        | dataini | string | Data Inicial | 
        | datafim | string | Data Final | 
        | numero_pedido | string | Movimentações dos itens do pedido. Ver quais endereços uma separação já feita efetivamente usou (numero_pedido) | 
        | itens_pedido | string | Lista o kardex dos itens constantes desse pedido. Ver quais endereços uma separação em andamento provavelmente vai usar (itens_pedido) | 
        | documento | string | Comentário importante de uma ação ocorrida no estoque. Ex: "RN 12345" | 

        Observações: Possui filtros obrigatórios, podendo passar um ou outro, porém se passar o "dataini" igual ao "datafim" juntamente com o "documento" é possível também filtrar sem a necessidade, por exemplo, de passar o "cod_sku"
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Kardexes.yaml
      x-stoplight:
        id: kotgg18jpwmvh
  /skuparts:
    get:
      summary: Listando Composição SKU
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Sku-Composicao.yaml
      operationId: get-skuparts
      description: |
        Lista de formas de quitação

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | id da Composição SKU| 
        | codigo_sku | int64 | Código do SKU | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Composição Sku (skuparts)
    post:
      summary: 'Criando uma Composição SKU (Ex: Display)'
      operationId: post-skuparts
      responses:
        '200':
          description: OK
      description: Cria uma nova SKU Composição
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Sku-Composicao.yaml
        description: ''
      tags:
        - Composição Sku (skuparts)
    parameters: []
  '/skuparts/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id da forma de quitação
    get:
      summary: Consultando uma Composição SKU
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Sku-Composicao.yaml
      operationId: get-skuparts-id
      description: 'Consulta uma composição SKU (Ex:  Display)'
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      tags:
        - Composição Sku (skuparts)
    put:
      summary: Atualizando uma composição SKU
      operationId: put-skuparts-id
      responses:
        '200':
          description: OK
      description: Atualiza uma composição SKU
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Sku-Composicao.yaml
        description: ''
      tags:
        - Composição Sku (skuparts)
    delete:
      summary: Excluindo uma Composição SKU
      operationId: delete-skuparts-id
      responses:
        '200':
          description: OK
      description: Exclui uma Composição SKU
      tags:
        - Composição Sku (skuparts)
  /status:
    get:
      summary: Consulta o Status da API GOLANG
      tags:
        - Status (status)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Status.yaml
      operationId: get-status
      description: Consulta Status
  /skugroups:
    get:
      summary: Listar Agrupamentos Comerciais
      tags:
        - Agrupamentos (skugroups)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Agrup-Comercial.yaml
      operationId: get-skugroups
      description: Listagem de Agrupamentos Comerciais (AC)
    post:
      summary: Criar Agrupamento Comercial
      operationId: post-skugroups
      responses:
        '200':
          description: OK
      description: Cria um novo AC (Agrupamento Comercial)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Agrup-Comercial.yaml
      tags:
        - Agrupamentos (skugroups)
  /skugrids:
    get:
      summary: Lista de grades
      tags:
        - Produtos (skus)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/SkuGrids.yaml
      operationId: get-skugrids
      description: 'Lista de grades. Filtros: `codigo_sku` (number) e `codigo_alfa` (string).'
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Criar nova grade
      operationId: post-skugrids
      responses:
        '200':
          description: OK
      tags:
        - Produtos (skus)
      description: Criar nova grade
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SkuGrids.yaml
  /stockdailysummaries:
    get:
      summary: Posição de estoque
      tags:
        - Posição Estoque (stockdailysummaries)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/StockDailySummaries.yaml
      operationId: get-stockdailysummaries
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      description: |-
        Lista de Posição de Estoque

        ## Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | data_resumo | string | Data | 
        | id_predio | int64 | ID do Prédio | 
        | codigo_sku | int64 | Código Sku | 
        | tipo_valor | string | Tipo Valor | 
        | ocultar_estoque_zerado | bool | Traz somente os com estoque |
      x-stoplight:
        id: au9jxmogwiypc
  /stocksummaries:
    get:
      summary: Consulta estoque de SKU por prédio
      tags:
        - Estoque (skustocks)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/StockSummary.yaml
      operationId: get-stocksummaries
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      description: |-
        Estoque de SKU por prédio. Filtros:
        - `codigo_sku`: código do SKU
  /suppliers:
    post:
      summary: Cria um Fornecedor
      tags:
        - Fornecedores (suppliers)
      responses:
        '200':
          description: OK
      operationId: post-suppliers
      description: Cria um novo fornecedor
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Supplier.yaml
        description: ''
    get:
      summary: Lista de Fornecedores
      tags:
        - Fornecedores (suppliers)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Supplier.yaml
      operationId: get-suppliers
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      description: |
        Lista de Fornecedores

        ## Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | ID da Fornecedor | 
        | ids | []int64 | IDs dos Fornecedores | 
        | pesquisa | string | Filtro tanto pelo nome razão, cpf ou cnpj ou id da pessoa | 
        | inativos | string | Por padrão só traz fornecedores ativos | 
  '/suppliers/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID do Fornecedor
    get:
      summary: Consulta um Fornecedor
      tags:
        - Fornecedores (suppliers)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Supplier.yaml
      operationId: get-suppliers-id
      description: Consulta um Fornecedor
    put:
      summary: Atualiza  um Fornecedor
      tags:
        - Fornecedores (suppliers)
      responses:
        '200':
          description: OK
      operationId: put-suppliers-id
      description: Atualiza  um Fornecedor
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Supplier.yaml
    delete:
      summary: Inativa um Fornecedor
      tags:
        - Fornecedores (suppliers)
      responses:
        '200':
          description: OK
      operationId: delete-suppliers-id
      description: Inativa um Fornecedor
  '/transfers/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID do Fornecedor
    get:
      summary: Consulta uma Transferência
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Transfers.yaml
      operationId: get-transfers-id
      description: Consulta uma Transferência
      x-stoplight:
        id: 4tc7getckackt
      tags:
        - Transferências (transfers)
    put:
      summary: Atualiza  uma Trânsferência
      tags:
        - Fornecedores (suppliers)
      responses:
        '200':
          description: OK
      operationId: put-transfers-id
      description: Atualiza uma Transferência
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Transfers.yaml
      x-stoplight:
        id: 645zsfod1okni
    delete:
      summary: Cancela uma Transferência
      tags:
        - Fornecedores (suppliers)
      responses:
        '200':
          description: OK
      operationId: delete-transfers-id
      description: |-
        Cancela uma Transferência. Objetivo é mudar o status para cancelado, onde:
        Se status < 600 então 599, Senão 699.
      x-stoplight:
        id: i0sum2w0bxkh0
  /transfers:
    get:
      summary: Lista de Transferências
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Transfers.yaml
      operationId: get-transfers
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
      description: |
        Lista de Transferências

        ## Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | ID da Fornecedor | 
        | ids | []int64 | IDs dos Fornecedores | 
        | etapa | int | Ex. Etapa 500, ou 600, 700 | 
        | id_empresa | int64 | ID da empresa | 
        | id_container | int | ID do container | 
        | vetor_empresa | []int64 | Filtrar por mais de uma empresa | 
        | vetor_status | []int | Filtrar por mais de um Status | 
        | todas | bool | Incluir também tranferências dos status 599, 699, 795 e 799 | 
        | vetor_pedidos | string | Filtro por mais de um pedido separados por vírgula | 
        | tipo_transf | string | Tipo de Transferência | 
        | dias_alteracao | int64 | Ex. 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. | 
      x-stoplight:
        id: 0rdd685mintxz
      tags:
        - Transferências (transfers)
    parameters: []
    post:
      summary: Criar nova Transferência
      operationId: post-transfers
      responses:
        '200':
          description: OK
      tags:
        - Transferências (transfers)
      description: Criar nova Transferência
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Transfers.yaml
  /taxclasses:
    get:
      summary: Listando as classes fiscais
      tags:
        - Tributária (Classe Fiscal)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Classe-Fiscal.yaml
      operationId: get-taxclasses
      description: |
        Listagem das classes fiscais

        Ver regra das prioridades do CFOP em: https://rednaxel.freshdesk.com/support/solutions/articles/47001200096-regras-do-cfop/preview
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Criando um mapeamento
      operationId: post-taxclasses
      responses:
        '200':
          description: OK
      tags:
        - Tributária (Classe Fiscal)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Classe-Fiscal.yaml
      description: Cria uma nova classe fiscal
    parameters: []
  '/taxclasses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id da classe fiscal
    get:
      summary: Consulta uma Classe Fiscal
      tags:
        - Tributária (Classe Fiscal)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Classe-Fiscal.yaml
      operationId: get-taxclasses-id
      description: Consulta uma classe fiscal
    put:
      summary: Atualizando uma classe fiscal
      operationId: put-taxclasses-id
      responses:
        '200':
          description: OK
      tags:
        - Tributária (Classe Fiscal)
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Classe-Fiscal.yaml
      description: Atualiza uma classe fiscal
    delete:
      summary: Excluindo uma classe fiscal
      operationId: delete-taxclasses-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
            application/xml:
              schema:
                type: object
                properties: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Classe-Fiscal.yaml
          application/xml:
            schema:
              type: object
              properties: {}
        description: ''
      description: Exclui uma classe fiscal
      tags:
        - Tributária (Classe Fiscal)
  '/tokens/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id do Token
    get:
      summary: Informações do token
      tags:
        - Login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: integer
                  user_id:
                    type: integer
                  nome_usuario:
                    type: string
                    description: Nome do usuário logado
                  user_email:
                    type: string
                    description: Email do usuário logado
                  picture_url:
                    type: string
                    description: URL da foto do usuário logado
                  loja:
                    description: ID da empresa onde foi efetuado o login
                    type: integer
                  nome_razao:
                    type: string
                    description: Nome/Razão Social da empresa onde foi efetuado o login
                  nome_loja:
                    type: string
                    description: Nome reduzido da empresa onde foi efetuado o login
                  id_predio:
                    type: integer
                    description: ID do prédio da empresa logada
                  cmun:
                    type: integer
                    description: Código do município (IBGE) da sede da empresa logada
                  uf:
                    type: string
                    description: UF (estado) da sede da empresa logada
                  nome_municipio:
                    type: string
                    description: Nome do município da sede da empresa logada
                  conta:
                    type: string
                    description: Conta (tenant) do usuário
                  url_logo:
                    type: string
                    description: URL do logotipo do tenant
                  ip_externo:
                    type: string
                    description: IP de onde foi efetuado o login
                  versao:
                    type: string
                    description: Versão do navegador (ou outro app frontend)
                  ult_oper:
                    type: string
                    description: Data/hora da última requisição
        '201':
          description: Created
      operationId: get-tokens-id
      description: Obtém informações do login atual
      parameters: []
  /units:
    get:
      summary: Listar unidades
      tags:
        - Unidades de Medida (units)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Unidade.yaml
      operationId: get-units
      description: Lista as unidades de medida
    post:
      summary: Criar unidade
      operationId: post-units
      responses:
        '200':
          description: OK
      tags:
        - Unidades de Medida (units)
      description: Cria uma unidade de medida
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Unidade.yaml
    parameters: []
  /leads:
    get:
      summary: Listagem de Leads
      tags:
        - Clientes em Potencial (leads)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Leads.yaml
      operationId: get-leads
      x-stoplight:
        id: xmrg5bv33nkdo
      description: |
        Lista de Leads

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | ID do lead | 
        | ids | []int64 | IDs dos leads | 
        | id_pessoa | int64 | ID da pessoa do lead (contato) | 
        | id_etapa | int64 | ID da Etapa | 
        | status_code | int64 | Status | 
        | codigo_alfa | string | Código Grade | 
        | id_motivo | int64 | ID do Motivo | 
        | id_vendedor | int64 | ID do Vendedor | 
        | id_canal | int64 | ID do Canal | 
        | id_carteira | int64 | ID da Carteira | 
        | pesquisa | string | Pesquisa tanto por ID como descrição do Lead | 
        | q | string | Também é uma pesquisa tanto por ID como descrição do Lead | 
        | sem_vendedor | bool | Leads sem Vendedor associado | 
        | fechados | bool | Fechados | 
        | temperatura | string | Temperatura | 
        | deletados | bool | Deletados | 
        | com_tarefas | bool | Com tarefas | 
        | id_tag | int64 | ID Tag | 
        | dias_alteracao | int | Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. Lembrar que o filtro dias_alteracao não verifica demais filtros | 
        | todos | bool | Traz tanto registros incluindo status code 7,9 e deletados | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
    post:
      summary: Criar um novo Lead
      tags:
        - Clientes em Potencial (leads)
      responses:
        '200':
          description: OK
      operationId: post-leads
      x-stoplight:
        id: fo8yggrnb184r
      description: Criar um novo Lead
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Leads.yaml
    parameters: []
  '/leads/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID da pessoa
    get:
      summary: Consulta um lead
      tags:
        - Clientes em Potencial (leads)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Leads.yaml
      operationId: get-leads-id
      x-stoplight:
        id: c6vwb0zxh3emj
      description: Consulta um lead
    put:
      summary: Atualiza um lead
      tags:
        - Clientes em Potencial (leads)
      responses:
        '200':
          description: OK
      operationId: put-leads-id
      x-stoplight:
        id: 3oryyp10x4zdl
      description: Atualiza um lead
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Leads.yaml
    delete:
      summary: Remove a etapa de um lead
      tags:
        - Clientes em Potencial (leads)
      responses:
        '200':
          description: OK
      operationId: delete-leads-id
      x-stoplight:
        id: 9p5x8ui1xyj34
      description: Remove a etapa de um lead
  /stockmovements:
    post:
      summary: Movimenta estoque em lote
      tags:
        - Estoque (skustocks)
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  contador:
                    type: integer
                    x-stoplight:
                      id: mp8s3xbp7h6sg
                    description: Quantidade de endereços modificados
      operationId: post-stockmovements
      x-stoplight:
        id: o79l0ty8zicb0
      security:
        - Token de acesso: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                Example 1:
                  tipo: corredor
                  id_predio: 5
                  origem: A@
                  destino: I#
              required:
                - tipo
                - id_predio
                - origem
                - destino
              properties:
                tipo:
                  type: string
                  example: corredor
                  description: Tipo de movimentação; use "corredor"
                id_predio:
                  type: integer
                origem:
                  type: string
                  description: Setor/corredor de origem
                  example: A@
                destino:
                  type: string
                  description: Setor/tipo de destino
                  example: G#
      description: 'Movimenta estoque em lote, informando origem e destino.'
  /loyaltycustomers:
    get:
      summary: Listagem Fidelidade Cliente
      tags:
        - Clientes Fidelidade (loyaltycustomers)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/LoyaltyCustomers.yaml
      operationId: get-loyaltycustomers
      x-stoplight:
        id: hbgy4xpvlq4jy
      description: |
        Lista de clientes com fidelidade

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | ID da Fidelidade | 
        | ids | []int64 | IDs da Fidelidade | 
        | id_plano | int64 | ID do plano | 
        | id_pessoa | int64 | ID da pessoa | 
        | cpf_cnpj | int64 | CPF ou CNPJ | 
        | pesquisa | string |Filtro tanto pelo nome razão, cpf ou cnpj ou id da pessoa | 
        | data_cadastro | string | Dato do cadastro | 
        | telefone | string | Telefone | 
        | email | string | Email | 
        | inativos | bool | Por padrão só traz os ativos | 
        | dias_alteracao | int | usado em integração. Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. | 
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
  '/loyaltycustomers/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID da pessoa
    put:
      summary: Atualiza um Cliente Fidelidade
      tags:
        - Clientes Fidelidade (loyaltycustomers)
      responses:
        '200':
          description: OK
      operationId: put-loyaltycustomers-id
      description: Atualiza um Cliente Fidelidade
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/LoyaltyCustomers.yaml
  /skutransits:
    get:
      summary: Listagem de SKU em trânsito
      description: |
        Lista de SKU em trânsito

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | ID Trânsito | 
        | codigo_sku | int64 | Código SKU | 
        | id_empresa | int64 | ID da empresa | 
        | numero_pedido | int64 | Itens do pedido | 
        | distrib_id | int64 | Itens do pedido |  
        | vetor_status | []int64 | Array de status do pedido |  
      tags:
        - Sku Trânsito (skutransits)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/SkuTransits.yaml
      operationId: get-skutransits
      x-stoplight:
        id: j2zqlw5hhj0ri
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
  /purchasecosts:
    get:
      summary: Validação de Impostos
      tags:
        - Entrada de NF (purchases)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Purchase.yaml
      operationId: get-purchasecosts
      x-stoplight:
        id: 5xgfnxphowc7f
      description: Lista as NF de Compra para validação de impostos
      parameters:
        - schema:
            type: integer
          in: query
          name: numero
          description: Nº da NF de Compra
        - schema:
            type: string
          in: query
          name: pesquisa
          description: Nome do Emitente
        - schema:
            type: boolean
          in: query
          name: todas
          description: 'Exibe status 290, 298 e 299'
        - schema:
            type: boolean
          in: query
          name: marcador_validacao
          description: Somente NF pendentes de validação
  /vouchers:
    get:
      summary: Listagem de Vales
      description: |
        Lista de Vales

        ### Filtros disponíveis

         Campo | Tipo | Descrição |
        | ------ | ------ | ------ |
        | id | int64 | ID Voucher | 
        | ids | []int64 | IDs dos vouchers |
        | cpf_cnpj | int64 | CPF ou CNPJ | 
        | chnfe | string | Chave de Acesso | 
        | codigo | string | Código | 
        | codigo_cartao | string | Código do Cartão | 
        | inativos | bool | Por padrão traz somente os vales ativos | 
        | situacao | string | Situação | 
        | id_tipo | int64 | ID do Tipo | 
        | pdv | bool | PDV | 
        | id_empresa | int64 | ID da Empresa | 
        | valor_vale | float64 | Pesquisa por valor de vale | 
        | pesquisa | string | Pesquisa por código ou descrição | 
        | vale_origem | string | Vale Origem | 
        | devol_saida | bool | Devolução Saída | 
        | tipo_vale | string | Tipo Vale | 
        | data_criacao | string | Data Criação | 
        | dataini | string | Data Inicial | 
        | datafim | string | Data Final |
        | filtrar_por | string | Filtrar por: dt_criacao |  
        | dias_alteracao | int | usado em integração. Ex: 1 busca alterações do dia atual, 2 do dia atual e do dia anterior. |         
      tags:
        - Vales (vouchers)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Vouchers.yaml
      operationId: get-vouchers
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Range'
        - $ref: '#/components/parameters/Sort'
components:
  schemas: {}
  parameters:
    Filter:
      name: filter
      in: query
      required: false
      schema:
        type: string
      description: Filtros
    Range:
      name: range
      in: query
      schema:
        minItems: 1
        maxItems: 2
        items:
          type: integer
          format: int32
        default: '[0,99]'
        example: '[0,99]'
      description: Paginação
      explode: true
      style: form
      required: true
    Sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            desc:
              type: string
      description: Ordenação
  securitySchemes:
    Usuário/Senha:
      type: http
      scheme: basic
      description: 'Usuário, Conta(tenant) e senha, ex: admin@zezinho:zeus'
    Token de acesso:
      type: http
      scheme: bearer
      description: ''
security:
  - Token de acesso: []
